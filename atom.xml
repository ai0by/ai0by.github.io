<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风向标 | 分享与创造</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sbcoder.cn/"/>
  <updated>2021-12-03T09:18:25.051Z</updated>
  <id>https://sbcoder.cn/</id>
  
  <author>
    <name>ai0by</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>进程与线程,概念及优化空间</title>
    <link href="https://sbcoder.cn/2021/12/01/Process-Thread-Optimization.html"/>
    <id>https://sbcoder.cn/2021/12/01/Process-Thread-Optimization.html</id>
    <published>2021-12-01T02:36:57.000Z</published>
    <updated>2021-12-03T09:18:25.051Z</updated>
    
    <content type="html"><![CDATA[<p>本文以Go语言为基础</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>将编译好的的二进制程序，在系统中执行起来的程序会被CPU装载到内存中，CPU会按照程序的指令去顺序执行程序，这个执行中的程序被称之为进程，多个程序同时执行则被称为多进程</p><p>单核CPU在执行任务过程中不能同时执行多余的任务，但是我们在实际场景中往往可以看到一台电脑有非常多的进程在运行，这就引出了进程的中断，当程序在读写硬盘这种慢IO操作时，当前进程会发出中断指令，使得CPU去执行下一个进程，防止了阻塞等待的问题，而CPU的执行效率是非常快的，所以更多时候即使他是串行执行程序，但也可以完美接收并发任务</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/12/01/o8RNHH.png" alt="o8RNHH.png" title>                </div>                <div class="image-caption">o8RNHH.png</div>            </figure><p>值得注意的是，并发和并行并非一样的东西，并发是代表一个CPU核心同时处理多个任务的情况，而并行是多个CPU核心处理多个任务</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/12/01/o8RSBQ.png" alt="o8RSBQ.png" title>                </div>                <div class="image-caption">o8RSBQ.png</div>            </figure><p>当进程中有大量硬盘IO操作时，将会出现大量的进程阻塞行为，而这种情况可能会占用大量的物理内存，在虚拟内存中，则会将这种阻塞的进程物理内存地址转移至硬盘地址，直至阻塞结束后再替换回物理内存中</p><p>而这种进程的执行过程也可以分为 创建、终止、阻塞、唤醒 的过程</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>一个进程可以有一个或多个线程</p><p>个人认为 ~ 线程是进程的抽象化，当一个进程只有一个线程时，那么这个线程就是进程</p><p>线程与进程，进程容纳了所有的资源，内存文件及各种单位，线程则只有寄存器和栈，线程与进程相同，同样有 阻塞和唤醒。</p><p>线程只有寄存器和栈的特性，以至于创建一个线程比创建进程更方便快捷，占用资源更少，当然前提是这些线程之间的共享资源大部分相同</p><p>进程占用资源，线程执行过程，线程都是依托于进程的，线程之间可以共享进程的资源</p><h3 id="三种形式"><a href="#三种形式" class="headerlink" title="三种形式"></a>三种形式</h3><ul><li>用户线程 （User Thread）</li><li>内核线程 （Kennel Thread）</li><li>轻量线程 （LightWeight Thread）</li></ul><p>首先要明确一个事实，他们并不是同一个维度的，多个用户线程对应多个内核线程，也就是他们是多对多的关系（协程则相当于一个内核线程对应了多个用户线程）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/12/01/oG86l6.png" alt="oG86l6.png" title>                </div>                <div class="image-caption">oG86l6.png</div>            </figure><p>通常我们常说的线程大部分指的是内核线程 ~</p><p>用户线程是由用户发起的调用，操作系统无法干预，当用户线程执行过程中，操作系统无法查看当前线程的情况也无法由操作系统关闭，即任务管理器也没用（协程则可以通过 pprof 之类的debug工具去测试）</p><p>用户线程相当于用户自发开启的线程，不通过系统内核，也可以认为启动用户线程的速度要比内核线程要快的多，也因为如此，即使是不支持线程的系统，也能由用户自发开启的线程来开启用户线程无需兼容内核</p><p>内核线程则是通过操作系统调用的，可以通过操作系统去管理该线程，相比于用户线程，内核线程的资源分配更加合理，且用户线程可能会因为阻塞导致多个线程同时阻塞，而内核线程的调度则由操作系统直接完成，无需考虑这一问题，但相比于用户线程，显然内核线程要更重量级一些</p><p>轻量线程有多重解释，它相当于内核线程与用户线程的对应和结合，相当于用户线程与内核线程的桥梁或者中间层，与用户线程也是，多对多的关系，兼容三种模式 1:1 N:1 N:N</p><p>1:1 一个用户线程 对应一个轻量线程 对应一个内核线程<br>N:1 多个用户线程对应一个轻量线程 对应一个内核线程<br>N:N 混合模式，前面两种方式的结合，多个用户线程对应多个轻量线程，由轻量线程找到内核线程一一对应</p><h2 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h2><h3 id="调度模型"><a href="#调度模型" class="headerlink" title="调度模型"></a>调度模型</h3><p>进程调度，当出现IO请求的时候，调度会将当前执行的进程切换到另一个进程，并保留上下文，以便于稍后切换回来时能够继续执行之前的进程</p><p>进程调度，当出现长时间占用CPU的进程时，造成系统吞吐量降低，调度会权衡任务完成数量</p><p>如果一个进程本身计算不复杂，而占用时间长时，需要考虑是否是IO的调用导致的，频繁的IO请求会增加CPU的进程切换，也会加大程序的执行时长</p><p>调度对于鼠标键盘等需要实时响应的程序会优先考虑</p><p>进程如果处于就绪状态，调度会尽快让进程继续执行</p><p>进程之间会通过内核的时间分片去模拟出并发场景，当单核CPU出现三个进程时，如果都没有阻塞，则调度会通过时间分片的方式先完成简单的程序然后再完成复杂程序，ABC三个进程同时存在时，按照进程顺序， A B C，内核会分配一个固定时间分片，例如 5ns，A执行5ns后执行B，B执行5ns后执行C，假设进程B执行完成时，则调度会继续A C之间的循环，B完成后执行C，C执行5ns后执行A，然后循环执行A C</p><p>如上操作会出现一个问题就是内核会频繁的切换进程，我们知道上下文也是消耗资源的，那么内核会做一个递增时间分片的操作，例如一开始是5ns，后续可能就递增为 10ns 15ns，以便于尽早完成一个进程减少进程上下文</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/12/03/oaUUtx.png" alt="oaUUtx.png" title>                </div>                <div class="image-caption">oaUUtx.png</div>            </figure><h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><p><strong>管道</strong><br>在Linux中我们常用的通信管道，<code>|</code>，如下命令中 <code>ps -ef |grep sbcoder</code> ，里面的符号位 <code>|</code> 就是一个管道，他代表将前一个进程中的数据带到下一个进程中</p><p>这种没有命名的管道被称之为 匿名管道，匿名管道将在进程结束后释放，有匿名则也有有名字的管道 命名管道 ，Linux中通过关键字 <code>mkfifo</code> 创建命名管道 <code>mkfifo sbcoderChannel</code>，通过命令可以将数据传输至管道中，<code>echo &quot;sbcoder&quot; &gt; sbcoderChannel</code>，接着命令就卡住了，这与Go语言中的信道很类似，有阻塞的作用通过阻塞我们可以做很多事情，有入则有出，可以通过命令取出数据 <code>cat &lt; sbcoderChannel</code> 获取刚才echo进去的数据</p><p>管道实际上是内核中的缓存，而读取管道数据则是在一个进程中fork出一个子进程去读取，而如果由一个进程同事负责读写则会非常混乱，所以如果需要双向通信则需要fork两个子进程，而创建子进程也会徒增负荷，也要尽可能避免此类操作</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/12/03/oa1uHf.png" alt="oa1uHf.png" title>                </div>                <div class="image-caption">oa1uHf.png</div>            </figure><p><strong>消息队列</strong><br>消息队列是保存在内核中的消息链表，由于消息队列的特性，会出现通信不及时和大小限制问题，更适合小数据的场景</p><p><strong>共享内存</strong><br>进程A与进程B都使用虚拟内存（只保存物理地址），则可以实现同一个数据块儿被两个进程同时使用</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/12/03/oa38IO.png" alt="oa38IO.png" title>                </div>                <div class="image-caption">oa38IO.png</div>            </figure><p>当A和B同时操作一块儿内存时，则也会出现问题，很容易造成数据冲突，就出现了<code>lock</code>的概念，也被称为 <code>信号量</code>，A操作时将信号量数值更改，B同时操作时发现数值已经被更改则说明资源被占用，进程阻塞，A在操作完成后会将信号量数值再改回去，B此时即可继续执行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/12/03/oa89YD.png" alt="oa89YD.png" title>                </div>                <div class="image-caption">oa89YD.png</div>            </figure><p><strong>信号Signal</strong></p><p>信号，也就是Signal，通过进程中的各种指令做通信，例如：程序接收到快捷键 <code>ctrl + c</code> 则会终止程序</p><p>Go语言中的Signal同理~</p><p><strong>socket</strong></p><p>不同主机之间的socket通信，为了方便不同主机之间的进程通信，衍生出的通信方式，他可以借助 TCP以及UDP以及本地进程等方式通信，其中TCP和UDP更适用于远程主机通信，而本地通信可以借助本地进程通信（字节流，数据报）</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul><li>高并发场景是否应该频繁读取硬盘信息呢</li></ul><p>个人感觉可以通过一个大文本读取至内存，然后并发处理的过程中将会很少产生阻塞行为，但也属于物理内存充足的情况下（空间换时间）</p><ul><li>如何更好的利用进程特性处理高并发任务</li></ul><p>我们了解并发实际也是自上至下的串行执行程序，那么也要适当地减少并发任务的复杂度和频繁的IO操作，但合理运用内存很重要，如果能计算出什么时间内物理内存的占用情况则更合理一些</p><ul><li>单内核多进程调度场景，如何设计更适合的程序结构</li></ul><p>个人认为，应该尽可能减少进程数量，在用户态之间搞定，类似Go的GMP调度，如果进程数量实在无法减少可以尝试将某些轻量级程序减负，让重量级的程序保持，多应用消息队列的方式进行通信（过多使用消息队列也是负担），需要综合考量异步的优缺点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文以Go语言为基础&lt;/p&gt;
&lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h2&gt;&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="优化" scheme="https://sbcoder.cn/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="优化" scheme="https://sbcoder.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>物理内存与虚拟内存与Swap内存</title>
    <link href="https://sbcoder.cn/2021/11/30/Memory-Optimization.html"/>
    <id>https://sbcoder.cn/2021/11/30/Memory-Optimization.html</id>
    <published>2021-11-30T03:48:38.000Z</published>
    <updated>2021-11-30T06:15:05.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="物理内存"><a href="#物理内存" class="headerlink" title="物理内存"></a>物理内存</h3><p>物理内存是真实的内存空间，通过物理内存地址，标记存储的数据，物理内存的实际大小也与内存条有关，由内核直接调用使用</p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>虚拟内存是物理内存的映射关系，为了防止程序开辟不同的物理内存空间，或者多处占用，则由操作系统去调度，使得进程在调用使用内存时需要通过虚拟内存的映射找到对应的物理内存地址，最终才能使用存储数据</p><p>如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/11/30/olRoWT.png" alt="olRoWT.png" title>                </div>                <div class="image-caption">olRoWT.png</div>            </figure><h3 id="Swap内存空间"><a href="#Swap内存空间" class="headerlink" title="Swap内存空间"></a>Swap内存空间</h3><p>Swap内存空间，顾名思义就是交换内存的空间，它的空间是硬盘空间，他是一个很有意思的东西，我们真实的内存空间存储时也是分一段一段去存储的，由于无法连续，那么可能也就无法让性能最大化</p><p>例如下图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/11/30/olWiOH.png" alt="olWiOH.png" title>                </div>                <div class="image-caption">olWiOH.png</div>            </figure><p>游戏，浏览器及音乐各占不同的内存空间，当浏览器进程退出时，操作系统会回收内存空间，但由于它是一段一段存储的，导致后来的程序想要占用200M的内存空间则无法实现，最多只能使用128M。</p><p>而交换空间则应运而生，程序在发生浏览器退出时，会将后面的音乐占用内存放到交换空间中，而后清空游戏后面的内存，再将音乐内存直接放到游戏内存后面，而后面的下一个程序则可以直接占用内存200m</p><p>所以交换空间配置适量的大小也很重要，太大没意义，太小则可能无法满足释放内存的需求，而由于交换空间是硬盘空间，速度显然不是很友好，因此相当大的程序释放（放入）时也许会造成程序卡顿。</p><p>而这种分段的片段，也可以称之为内存分段</p><p>由于内存分段的数量过于庞大，他需要每次程序释放时同时释放内存碎片，为了更好地释放内存，物理内存存储的也是映射关系，也称之为 内存分页，相当于一个索引，一个内存分页存储着不同内存分段的物理地址，而程序只需要通过内存分页即可找到真实的内存数据，由于现实场景中，进程数量的激增，一层分页也无法满足所有，需要每个进程都保存一份分页不太现实，就出现了多级分页，只存储顶级分页及常用的二级分页</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/11/30/olj5DI.png" alt="olj5DI.png" title>                </div>                <div class="image-caption">olj5DI.png</div>            </figure><p>总结来说 Swap是硬盘空间，速度较差，它存储的进程数据一般是交换空间数据或者不活跃的进程数据</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>为了在多进程环境下，使得进程之间的内存地址不受影响，相互隔离，于是操作系统就为每个进程独立分 配一套虚拟地址空间，每个程序只关心自己的虚拟地址就可以，实际上大家的虚拟地址都是一样的，但分 布到物理地址内存是不一样的。作为程序，也不用关心物理地址的事情。</p><p>每个进程都有自己的虚拟(内存)空间，而物理内存只有一个，所以当启用了大量的进程，物理内存必然会很紧 张，于是操作系统会通过内存交换技术，把不常使用的内存暂时存放到硬盘(换出)，在需要的时候再装 载回物理内存(换入)。</p><h2 id="划分空间"><a href="#划分空间" class="headerlink" title="划分空间"></a>划分空间</h2><h3 id="C语言中的空间划分"><a href="#C语言中的空间划分" class="headerlink" title="C语言中的空间划分"></a>C语言中的空间划分</h3><p>C语言有着各式各样的内存清理问题，这也是各种C语言BUG的大头</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/11/30/o1pdmj.png" alt="o1pdmj.png" title>                </div>                <div class="image-caption">o1pdmj.png</div>            </figure><p>C语言中，动态分配的内存（malloc，mmap）则是动态分配堆和文件的内存 </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>小林Coding（图解系统）</li></ul><p>近期写一写感谢大佬的电子图书笔记，小白受益良多</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h2&gt;&lt;h3 id=&quot;物理内存&quot;&gt;&lt;a href=&quot;#物理内存&quot; class=&quot;headerlink&quot; title=&quot;物理内存&quot;&gt;&lt;/a&gt;物理内存&lt;/h
      
    
    </summary>
    
      <category term="优化" scheme="https://sbcoder.cn/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="优化" scheme="https://sbcoder.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>利用CPU的特性开发更高效的代码</title>
    <link href="https://sbcoder.cn/2021/11/29/CPU-Cache-Optimization.html"/>
    <id>https://sbcoder.cn/2021/11/29/CPU-Cache-Optimization.html</id>
    <published>2021-11-29T08:31:34.000Z</published>
    <updated>2021-11-30T01:35:29.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CPU-Cache是什么"><a href="#CPU-Cache是什么" class="headerlink" title="CPU Cache是什么"></a>CPU Cache是什么</h2><p>CPU Cache是在内存的基础上，可以被CPU直接读取的缓存，分为 L1,L2,L3 三层缓存级别，他的读取速度，是内存的100倍以上，我们都知道基于内存的数据库Redis，仅仅是使用了内存存储就很快了，CPU Cache则更快，利用好CPU Cache则可以让你编写的程序更快。</p><p>相比较各类IO操作，CPU Cache则是最底层的，分级一般为 L1 Cache &gt; L2 Cache &gt; L3 Cache &gt; MEM &gt; SSD &gt; HDD，按照现在市场上面的定价，相对应的价格也是梯形下降</p><p>相对于CPU Cache昂贵的价格，带来的收益自然也要更高，可以通过如下命令查看所在机器的CPU Cache分别是多少，从而更有利于优化代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 获取L1 数据缓存大小</span><br><span class="line">cat /sys/devices/system/cpu/cpu0/cache/index0/size</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取L1 指令缓存大小</span><br><span class="line">cat /sys/devices/system/cpu/cpu0/cache/index1/size</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取L2 Cache 大小</span><br><span class="line">cat /sys/devices/system/cpu/cpu0/cache/index2/size</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取L3 Cache 大小</span><br><span class="line">cat /sys/devices/system/cpu/cpu0/cache/index3/size</span><br></pre></td></tr></table></figure><p>一般来说 L3 的容量 &gt; L2 &gt; L1数据 = L1指令</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/11/29/oMLjgI.png" alt="oMLjgI.png" title>                </div>                <div class="image-caption">oMLjgI.png</div>            </figure><p>越靠近 CPU 核心的缓存其访问速度越快，CPU 访问 L1 Cache 只需要 2~4 个时钟周期，访问 L2 Cache 大约 10~20 个时钟周期，访问 L3 Cache 大约 20~60 个时钟周期，而访问内存速度大概在 200~300 个 时钟周期之间。</p><p>时钟周期是CPU主频的倒数，例如 2GHZ主频的CPU，一个时钟周期是 0.5ns</p><h2 id="CPU-Cache-Line"><a href="#CPU-Cache-Line" class="headerlink" title="CPU Cache Line"></a>CPU Cache Line</h2><p>CPU Cache Line 是每次CPU载入缓存的大小，CPU在读取缓存信息时并非是一次一字节读取而是每次读一个固定字节长度的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/11/29/oMOIRs.png" alt="oMOIRs.png" title>                </div>                <div class="image-caption">oMOIRs.png</div>            </figure><p>由于他每次是读一块儿数据，那么我们在编写代码时则可以避免多次读取内存，可以将数据内容压缩到64位以内，避免重复读</p><p>当我们在使用数组时，例如一个 数据 A 长度 65，则会缓存前64位数组内容，例如从下标0读到63，则不会重复读取内容，那么如果读0 然后 读 64呢？</p><p>答案是会重复读内存，他会自动缓存从0开始的一共长度64的数据，那么下标64已经超出这个长度则会重复读内存</p><p>那么如果读 0 然后读 2呢，还会重复读内存吗？</p><p>答案也是肯定的，<em>如果跳着读他会重复缓存，必须是一个连续的数值才可以利用上这个长度</em></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p : = [<span class="number">3</span>][<span class="number">3</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span> ,<span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">"echo : "</span> ,p[i][j])</span><br><span class="line"><span class="comment">// fmt.Println("echo : " ,p[j][i])</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述<code>Go</code>代码中 <code>fmt.Println(&quot;echo : &quot; ,p[i][j])</code>是在内存中读取连续的数值，而 <code>fmt.Println(&quot;echo : &quot; ,p[j][i])</code> 则并非是在读连续数据，他会不断地请求内存，从而会发现前者的效率更高一些</p><p>总结 ： 抛开一切因素，读取数据时按照存储顺序来读一定要比任意读效率要高，如果有条件控制数据长度那么可以结合CPU Cache Line 的长度来做一些优化</p><h2 id="CPU分支预测"><a href="#CPU分支预测" class="headerlink" title="CPU分支预测"></a>CPU分支预测</h2><p>CPU本身是有一个分支预测功能，它相当于一个CPU自带的优化器，当我们在代码中使用if判断的时候，CPU会自行预测他的结果并缓存，那么CPU预测的结果就一定是准确的么，当然不是~</p><p>既然CPU的分支预测可以在不知道结果的情况下缓存他认为正确的数据，那么我们在编写代码时则可以适当地让CPU的分支预测更准确，那么也就避免了继续从内存读取数据，避免了多余的操作</p><p>代码实现该如何做呢，当一个if语句大多数时间都是 <code>真</code> 的情况下，那么CPU的分支预测将在后续预测中更容易缓存 <code>真</code> 的数据，也可以说，我们的代码尽量让数据保持在一个分支中，可以避免重复读取操作</p><p>除了这种CPU自动的分支预测，C语言也提供了一个方法可以告诉CPU大概的结果，从而使CPU更多的缓存某个分支的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> likely(x) __builtin_expect(!!(x),1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlikely(x) __builtin_expect(!!(x),0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (likely(a == <span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* code */</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">/* code */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型和线程绑定"><a href="#数据类型和线程绑定" class="headerlink" title="数据类型和线程绑定"></a>数据类型和线程绑定</h2><p>一般情况下，<code>long</code> 类型 要占用更多的空间，所以很多人在使用时更愿意使用 <code>int</code>，但是在CPU Cache line 中确并不如此，如果一些相同的数据经常要一起使用，我们尽量需要把数据长度控制在特定长度之内或者将数据按照指定顺序来存储更好。</p><p>数据类型会影响什么，真的是占用内存越小越好吗？</p><p>并非如此，现在的服务器更多的是多核CPU，单核CPU则不需要特别注意，多核CPU在处理数据的时候，L1，L2 Cache是独立存在于各个CPU核心的，只有L3 Cache是共享的，既如此，那么L1 和L2的Cache是如何共享信息保持数据一致性？</p><p>如果一个进程在不同核心 来回切换，各个核心的缓存命中率就会受到影响，当有多个同时执行「计算密集型」的线程，为了防止因为切换到不同的核心，而导致缓存命中率下降的问 题，我们可以把线程绑定在某一个 CPU 核心上</p><p>在 Linux 上提供了 sched_setaffinity 方法，来实现将线程绑定到某个 CPU 核心这一功能，从某些程度上来说，亦可以保证数据的一致性问题</p><p>多核多线程之间的数据一致性如何保证？现在市面上大多数的CPU核心是通过 <code>MESI</code> 协议来保持数据一致性的，是<code>Modified Exclusive Shared Invalidated</code>的缩写，即是： 已修改 独占 已共享 已失效</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/11/30/oleDCd.png" alt="oleDCd.png" title>                </div>                <div class="image-caption">oleDCd.png</div>            </figure><p>如上，当两个线程都在操作时，A和B都是从内存取出一块儿数据来操作（CPU Cache Line），很多情况下，如果未能保证数据的连续性，A线程就容易拿到B的数据，B也会拿到A的数据，如果A线程操作变量内容时，那么B也需要同时修改才能保证数据的一致性</p><p>那么数据的’锁‘该如何保证呢，则是 <code>MESI</code>协议来保证的。</p><p>线程A操作变量发生变化时，线程A不会广播写入到内存，而是将数据标识为 <code>已修改</code>，而其他线程则是将数据标记为 <code>已失效</code>，当线程读取数据发现标识为已失效时才会重复读取数据更新数据，否则频繁的刷新数据则失去了CPU Cache的意义</p><p>当线程A将已修改的数据写入到内存后，其他线程也更新完数据，那么，将会把数据标记为 已共享</p><p>当线程A创建一个数据，其他线程缓存并不存在该数据时则该数据为 独占</p><p>如上，当出现越来越多的数据在不断地变化，多个线程操作同一块儿缓存，即使有<code>MESI</code>协议的调度，也不免多了很多操作，所以有些人就想到了用占位更大的字符类型让一个变量占用更多的字节数，从而达到保证线程永远拿到这一块儿数据的时候不会有其他线程的共享数据，而实际上，在多核系统中，也提供了宏定义 <code>__cacheline_aligned_in_smp</code> 来保证数据的长度与CPU Cache Line 保持一致</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://z3.ax1x.com/2021/11/30/olnX9J.png" alt="olnX9J.png" title>                </div>                <div class="image-caption">olnX9J.png</div>            </figure><p>如上，A和B通过宏定义 <code>__cacheline_aligned_in_smp</code> 定义后，字节数会各自占用一块儿，则避免了数据频繁共享的问题</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>小林Coding（图解系统）</li></ul><p>近期写一写感谢大佬的电子图书笔记，小白受益良多</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CPU-Cache是什么&quot;&gt;&lt;a href=&quot;#CPU-Cache是什么&quot; class=&quot;headerlink&quot; title=&quot;CPU Cache是什么&quot;&gt;&lt;/a&gt;CPU Cache是什么&lt;/h2&gt;&lt;p&gt;CPU Cache是在内存的基础上，可以被CPU直接读取的缓
      
    
    </summary>
    
      <category term="优化" scheme="https://sbcoder.cn/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="优化" scheme="https://sbcoder.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>frp+Nginx内网穿透远程桌面</title>
    <link href="https://sbcoder.cn/2020/07/27/frp-nginx.html"/>
    <id>https://sbcoder.cn/2020/07/27/frp-nginx.html</id>
    <published>2020-07-27T08:41:31.000Z</published>
    <updated>2020-07-27T08:51:35.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>基于 <a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">fatedier/frp</a> 的内网穿透服务<br>参考文档 <a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">frp中文文档</a><br>参考文档 <a href="https://sspai.com/post/52523" target="_blank" rel="noopener">使用frp进行内网穿透</a></p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>直接下载 <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">Releases · fatedier/frp</a><br>找到对应版本下载即可，我这里服务端选用的是 <code>frp_0.33.0_linux_386</code></p><p>国内机器速度慢可以使用我的个人镜像地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://api.0161.org/resources/frp_0.33.0_linux_386.tar.gz</span><br></pre></td></tr></table></figure></p><p>修改配置文件 <code>frps.ini</code> 文件，建议增加Token验证 关于服务端配置可以参照官方给出的完全版配置文件及注释查看 <code>frps_full.ini</code> 文件</p><p>配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">token = 123456</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = 123456</span><br><span class="line">vhost_http_port = 10088</span><br><span class="line">vhost_https_port = 10443</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frps -c ./frps.ini &amp;</span><br></pre></td></tr></table></figure><p>查看后台进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobs</span><br></pre></td></tr></table></figure></p><p>删除进程示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep frps | grep -v grep</span><br><span class="line">kill &lt;进程id&gt;</span><br></pre></td></tr></table></figure></p><p>根据上述配置好的端口 <code>7500</code> 使用 IP+端口 访问frp面板 输入面板用户名+密码<br>该面板无实际性作用，仅用来做探针以及查看当前服务的状态，如未配置dashboard则无法使用dashboard<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/27/ai3FHK.png" alt="1.png" title>                </div>                <div class="image-caption">1.png</div>            </figure></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>下载 客户端 可以直接在github下载或者使用我的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://api.0161.org/resources/frp_0.33.0_windows_amd64.zip</span><br></pre></td></tr></table></figure></p><p>解压后修改 <code>frpc.ini</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = &lt;你的服务器IP地址&gt;</span><br><span class="line">server_port = 7000</span><br><span class="line">token = 123456</span><br><span class="line">[rdp]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1           </span><br><span class="line">local_port = 3389</span><br><span class="line">remote_port = 7001</span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = &lt;你的远程解析域名 例如: xxx.0161.org&gt;</span><br></pre></td></tr></table></figure><p>上述使用Windows开启3389后可以访问远程桌面，Linux同理，只需要修改为 <code>SSH</code> 即可<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/27/ai2Nut.png" alt="2.png" title>                </div>                <div class="image-caption">2.png</div>            </figure></p><p>值得注意的是 custom_domains 这个参数需要配合 vhost_http_port 这个参数使用，由于跟Nginx冲突所以上述端口我开启的是 10088<br>可以使用域名解析的方式 架设游戏服务器 或者网络云盘 群晖 你懂得网站等</p><h2 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h2><p>使用上述配置必须要使用 域名+端口 的形式才能访问，如果要用正式环境则不美观，且我们希望它与Nginx共存，因此，可以通过Nginx反向代理的形式去解析<br>配置Nginx配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name xxx.0161.org;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass  http://127.0.0.1:10088;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>流程图解<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/27/aiy8OK.png" alt="3.png" title>                </div>                <div class="image-caption">3.png</div>            </figure></p><p>至此，可以直接访问 xxx.0161.org 无需携带端口号</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;基于 &lt;a href=&quot;https://github.com/fatedier/frp&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="折腾" scheme="https://sbcoder.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="运维" scheme="https://sbcoder.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="内网穿透" scheme="https://sbcoder.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
      <category term="frp" scheme="https://sbcoder.cn/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>简单制作网易云音乐解析接口</title>
    <link href="https://sbcoder.cn/2020/07/27/neteasy-music.html"/>
    <id>https://sbcoder.cn/2020/07/27/neteasy-music.html</id>
    <published>2020-07-27T02:44:29.000Z</published>
    <updated>2020-07-27T06:33:58.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官方接口"><a href="#官方接口" class="headerlink" title="官方接口"></a>官方接口</h2><p>网易云是有一个官方的音乐解析接口的，只是隐藏的比较深（其实也还好），可以选择使用官方的解析接口也可以使用我的，可能官方的有时效性</p><p>Step1. 找到一张无版权歌曲<br>点击生成外链播放器<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/27/aPDuNR.png" alt="aPDuNR.png" title>                </div>                <div class="image-caption">aPDuNR.png</div>            </figure><br>Step2. 选择flash播放器<br>开启F12 审查元素 选择flash播放器<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/27/aPDnE9.png" alt="aPDnE9.png" title>                </div>                <div class="image-caption">aPDnE9.png</div>            </figure><br>Step3. 搜索接口<br>直接在F12 搜索 song 找到如下接口<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/27/aPDZB4.png" alt="aPDZB4.png" title>                </div>                <div class="image-caption">aPDZB4.png</div>            </figure><br>Step. 复制接口地址<br>302直接跳转，我们可以直接获取到直链地址<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/27/aPDeHJ.png" alt="aPDeHJ.png" title>                </div>                <div class="image-caption">aPDeHJ.png</div>            </figure></p><p>找到官方接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://music.163.com/song/media/outer/url?id=&lt;歌曲ID&gt;</span><br></pre></td></tr></table></figure></p><h2 id="根据官方内容自制接口"><a href="#根据官方内容自制接口" class="headerlink" title="根据官方内容自制接口"></a>根据官方内容自制接口</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$params = $_REQUEST;</span><br><span class="line">$returnData = [];</span><br><span class="line">$returnData[<span class="string">'src'</span>] = <span class="string">'error 500'</span>;</span><br><span class="line">$returnData[<span class="string">'code'</span>] = <span class="number">0</span>;</span><br><span class="line">$returnData[<span class="string">'msg'</span>] = <span class="string">'无状态'</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($params[<span class="string">'url'</span>]) || <span class="keyword">empty</span>($params[<span class="string">'url'</span>])) &#123;</span><br><span class="line">$returnData[<span class="string">'msg'</span>] = <span class="string">'5001 URL或者ID参数不存在'</span>;</span><br><span class="line">    <span class="keyword">echo</span> json_encode($returnData,JSON_UNESCAPED_SLASHES);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">$url     = $params[<span class="string">'url'</span>];</span><br><span class="line">$pattern = <span class="string">'/(\d&#123;5,20&#125;)/i'</span>;</span><br><span class="line">preg_match($pattern, $url, $matches);</span><br><span class="line"><span class="keyword">if</span> (!$matches) &#123;</span><br><span class="line">$returnData[<span class="string">'msg'</span>] = <span class="string">'5002 URL或者ID格式有误'</span>;</span><br><span class="line">    <span class="keyword">echo</span> json_encode($returnData,JSON_UNESCAPED_SLASHES);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$getParameterUrl = <span class="string">'https://music.163.com/song/media/outer/url?id='</span> . $matches[<span class="number">0</span>];</span><br><span class="line">var_dump($getParameterUrl);<span class="keyword">exit</span>();</span><br><span class="line">$headers = get_headers($getParameterUrl, <span class="keyword">TRUE</span>);</span><br><span class="line"><span class="comment">//输出跳转到的网址</span></span><br><span class="line"><span class="keyword">if</span> ($headers[<span class="string">'Location'</span>]) &#123;</span><br><span class="line">$returnData[<span class="string">'msg'</span>] = <span class="string">'成功'</span>;</span><br><span class="line">$returnData[<span class="string">'src'</span>] = $headers[<span class="string">'Location'</span>];</span><br><span class="line">$returnData[<span class="string">'code'</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> json_encode($returnData,JSON_UNESCAPED_SLASHES);</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>二次封装之后可以使用<br>注意：网易云的这个接口无法使用国外IP访问，如IP不符可能会返回404</p><p><strong>可以使用我的API接口获取最新版解析</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;官方接口&quot;&gt;&lt;a href=&quot;#官方接口&quot; class=&quot;headerlink&quot; title=&quot;官方接口&quot;&gt;&lt;/a&gt;官方接口&lt;/h2&gt;&lt;p&gt;网易云是有一个官方的音乐解析接口的，只是隐藏的比较深（其实也还好），可以选择使用官方的解析接口也可以使用我的，可能官方的有时
      
    
    </summary>
    
      <category term="折腾" scheme="https://sbcoder.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="音乐" scheme="https://sbcoder.cn/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>使用Rancher快速部署k8s集群</title>
    <link href="https://sbcoder.cn/2020/07/24/rancher-install.html"/>
    <id>https://sbcoder.cn/2020/07/24/rancher-install.html</id>
    <published>2020-07-24T03:32:57.000Z</published>
    <updated>2020-07-24T03:34:48.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Rancher"><a href="#安装Rancher" class="headerlink" title="安装Rancher"></a>安装Rancher</h2><p><strong>注意</strong>：最低配置为 2H4G1M  本教程使用 2H8G5M Ubuntu18.04<br>卸载旧版Docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure></p><p>脚本安装Docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure></p><p>更换阿里云源<br>登录 <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><p>找到 加速地址，或者使用我的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://p4sew3ge.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>安装Rancher<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --restart=unless-stopped -v /home/rancher:/var/lib/rancher/ -p 80:80 -p 443:443 rancher/rancher:stable</span><br></pre></td></tr></table></figure></p><p>打开 https://&lt;你的IP&gt;<br>忽略掉证书提示，继续进入<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/24/UXXLLt.png" alt="1.png" title>                </div>                <div class="image-caption">1.png</div>            </figure></p><h2 id="添加集群"><a href="#添加集群" class="headerlink" title="添加集群"></a>添加集群</h2><p>Step1.设置语言<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/24/UXjlO1.png" alt="2.png" title>                </div>                <div class="image-caption">2.png</div>            </figure></p><p>Step2.选择右上角添加集群，选择自定义<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/24/UXjctS.png" alt="3.png" title>                </div>                <div class="image-caption">3.png</div>            </figure></p><p>Step3.设置好集群名字后直接点击下一步</p><p>Step4.配置节点<br>按照需要配置，我这里选择全部<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/24/UXvRUK.png" alt="4.png" title>                </div>                <div class="image-caption">4.png</div>            </figure></p><p>Step5.配置公网IP<br>云主机需要配置<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/24/UXxexJ.png" alt="5.png" title>                </div>                <div class="image-caption">5.png</div>            </figure></p><p>Step6.复制命令执行<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/24/UXxwZt.png" alt="6.png" title>                </div>                <div class="image-caption">6.png</div>            </figure><br>执行后会启动一个容器<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/24/UXxhd0.png" alt="7.png" title>                </div>                <div class="image-caption">7.png</div>            </figure></p><p>Step7.集群部署节点完成<br>准备中…<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/24/UXzPQH.png" alt="8.png" title>                </div>                <div class="image-caption">8.png</div>            </figure><br>完成部署<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/24/UXznfS.png" alt="9.png" title>                </div>                <div class="image-caption">9.png</div>            </figure></p><h2 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h2><p>选择主机 - 编辑集群<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/24/UjC13T.png" alt="11.png" title>                </div>                <div class="image-caption">11.png</div>            </figure><br>拉到最下面，与上面添加节点方式一样，修改为子节点的ip，然后在子节点运行该命令<br>等待添加完成<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/24/Uj9r0s.png" alt="10.png" title>                </div>                <div class="image-caption">10.png</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Rancher&quot;&gt;&lt;a href=&quot;#安装Rancher&quot; class=&quot;headerlink&quot; title=&quot;安装Rancher&quot;&gt;&lt;/a&gt;安装Rancher&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：最低配置为 2H4G1M  本教程使用 2H
      
    
    </summary>
    
      <category term="架构" scheme="https://sbcoder.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="运维" scheme="https://sbcoder.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Docker" scheme="https://sbcoder.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04部署Kubernetes(k8s)集群可视化界面Dashboard</title>
    <link href="https://sbcoder.cn/2020/07/23/Kubernetes-Ubuntu.html"/>
    <id>https://sbcoder.cn/2020/07/23/Kubernetes-Ubuntu.html</id>
    <published>2020-07-23T01:12:57.000Z</published>
    <updated>2020-07-23T06:03:37.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="k8s概念"><a href="#k8s概念" class="headerlink" title="k8s概念"></a>k8s概念</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><blockquote><p>Kubernetes是一个完备的分布式系统支撑平台。Kubernetes具有完备的集群管理能力，包括多层次的安全防护和准入机制/多租户应用支撑能力、透明的服务注册和服务发现机制、内建智能负载均衡器、强大的故障发现和自我修复功能、服务滚动升级和在线扩容能力、可扩展的资源自动调度机制，以及多粒度的资源配额管理能力。同时kubernetes提供了完善的管理工具，这些工具覆盖了包括开发、测试部署、运维监控在内的各个环节；因此kubernetes是一个全新的基于容器技术的分布式架构解决方案，并且是一个一站式的完备的分布式系统开发和支撑平台</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/20/U4kh5j.png" alt="Kubernetes简易.png" title>                </div>                <div class="image-caption">Kubernetes简易.png</div>            </figure><h3 id="Kubernetes-Service"><a href="#Kubernetes-Service" class="headerlink" title="Kubernetes Service"></a>Kubernetes Service</h3><blockquote><p><code>Service</code>的服务进程目前都基于<code>Socker</code>通信方式对外提供服务，比如redis、memcache、MySQL、Web Server，或者是实现了某个具体业务的一个特定的TCP Server进程。虽然一个<code>Service</code>通常由多个相关的服务进程来提供服务，每个服务进程都有一个独立的Endpoint(IP+Port)访问点，但Kubernetes 能够让我们通过<code>Service</code>虚拟<code>Cluster IP+Service Port</code>连接到指定的<code>Service上</code>。有了<code>Kubernetes</code>内建的透明负载均衡和故障恢复机制，不管后端有多少服务进程，也不管某个服务进程是否会由于发生故障而重新部署到其他机器，都不会影响到我们对服务的正常调用。更重要的是这个<code>Service</code>本身一旦创建就不再变化，这意味着<code>Kubernetes</code>集群中，我们再也不用为了服务的IP地址变来变去的问题而头疼。</p></blockquote><p><code>service</code>可以通过访问点去访问不同的子节点下面的<code>Pod</code>上，类似一个<code>Proxy</code>的概念，个人理解为他本身类似集群，通过<code>service</code>分发<br>与<code>swarm</code>集群中的<code>service</code>类似，可以保持容器启动数量，由于权限相关问题，用户手动命令要大于service控制的权限级别，因此如果在使用<code>service</code>控制<code>Pod</code>时，有可能导致报错，不推荐使用<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/20/U4AzTg.png" alt="Kubernetes Service.png" title>                </div>                <div class="image-caption">Kubernetes Service.png</div>            </figure></p><h3 id="Kubernetes-Pod"><a href="#Kubernetes-Pod" class="headerlink" title="Kubernetes Pod"></a>Kubernetes Pod</h3><blockquote><p>Pod运行在一个我们称之为节点Node的环境中，可以是私有云也可以是公有云的虚拟机或者物理机，通常在一个节点上运行几百个Pod;其次，每个Pod里运行着一个特殊的被称之为Pause的容器，其他容器则为业务容器，这些业务容器共享Pause容器的网络栈和Volume挂载卷，因此他们之间的通讯和数据交换更为高效。在设计时我们可以充分利用这一特征将一组密切相关的服务进程放入同一个Pod中。<br>并不是每个Pod和它里面运行的容器都能映射到一个Service 上，只有那些提供服务(无论是对内还是对外)的一组Pod才会被映射成一个服务。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/21/UIKJMQ.png" alt="Kubernetes Pod.png" title>                </div>                <div class="image-caption">Kubernetes Pod.png</div>            </figure><h3 id="Pod-amp-Container"><a href="#Pod-amp-Container" class="headerlink" title="Pod &amp; Container"></a>Pod &amp; Container</h3><ul><li><p>容器（Container）是一种高度隔离的封装程序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/21/UIDylQ.png" alt="容器1.png" title>                </div>                <div class="image-caption">容器1.png</div>            </figure><p>非所有的应用都适合选择容器，开发者可以根据自己应用的特点和需求选择最适合的计算单元。例如，你的应用是高性能、互信的，且处于同一个管理区域，那么用线程或者进程就可以满足；但如果你的应用是多租户的，并且和其他应用运行在同一个空间，那么你就需要考虑如何将这些应用安全地隔离开，使得数据不会被泄露或性能受到影响。那么这时，容器也许就是一个不错的选择了。<br>容器便于管理，因为现在市场上有着完全完善的生态以及<code>Docker</code>的支持度愈发增加，越来越多的公司（个人）选择<code>Docker</code>，我个人也更倾向于<code>Docker</code>，有了<code>Docker</code>就可以非常完美的管理<code>Images</code>以及<code>Container</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/21/UIrVtf.png" alt="容器2.png" title>                </div>                <div class="image-caption">容器2.png</div>            </figure><p>容器是只占用很少的空间的，真正占用空间大的是<code>Images</code>，也可以说 <code>Container</code> 依赖 <code>Images</code></p></li><li><p>Pod，一种增强型容器<br>Pod是一种组合的多容器运行单元，也是Kubernetes里的一个基础单元。你可以把它看作是一种容器的扩展或者增强型的容器。Pod里面包括一个主容器和数个辅助容器，它们共同完成一个特定的功能。把多个进程（容器也是一种隔离的进程）打包在一个Name Space里的时候，就构成了一个Pod。Pod里面不同进程的应用包装仍然是独立的（每个容器都会有自己的镜像）。<br>Pod的意义在于，它可以既保持主容器和辅助容器的的密切关系，又保持主容器的独立性。由于主容器和辅助容器的生命周期相同，可以同时被创建和销毁，因此把它们放在一个Pod中，可以使他们的交互更加高效。</p></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.sohu.com/a/382769383_115128" target="_blank" rel="noopener">Aholiab - 云原生的基石，一文读懂容器、Docker、Pod到底是什么！ </a><br><a href="https://k.i4t.com/" target="_blank" rel="noopener">abcdocker编写k8s中文文档</a><br><a href="https://k8sops.cn/ubuntu_kubeadm/" target="_blank" rel="noopener">Ubuntu18.04使用kubeadm部署v1.18 HA集群</a></p><h2 id="部署k8s"><a href="#部署k8s" class="headerlink" title="部署k8s"></a>部署k8s</h2><h3 id="机器选择"><a href="#机器选择" class="headerlink" title="机器选择"></a>机器选择</h3><p>这里我只做学习用途，因此开通的是阿里的按量计费机器以及低配置机器</p><ul><li>master01     2H8G  阿里云 Ubuntu18.04</li><li>node01     2H8G  阿里云 Ubuntu18.04</li></ul><h3 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h3><p><strong>Ubuntu修改仓库镜像</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sudo cat &gt; /etc/apt/sources.list &lt;&lt; EOF</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>关闭防火墙</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw disable</span><br></pre></td></tr></table></figure></p><p><strong>时间同步</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install chrony -y &amp;&amp; sudo systemctl start chrony &amp;&amp; sudo systemctl enable chrony</span><br><span class="line"></span><br><span class="line">#查看chrony连接的公网服务器</span><br><span class="line">cat /etc/chrony/chrony.conf </span><br><span class="line">pool ntp.ubuntu.com        iburst maxsources 4</span><br><span class="line">pool 0.ubuntu.pool.ntp.org iburst maxsources 1</span><br><span class="line">pool 1.ubuntu.pool.ntp.org iburst maxsources 1</span><br><span class="line">pool 2.ubuntu.pool.ntp.org iburst maxsources 2</span><br></pre></td></tr></table></figure></p><p><strong>禁用swap</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapoff -a</span><br></pre></td></tr></table></figure></p><p>上述命令可以临时禁用掉swap，如果想要永久禁止，需要编辑 <code>/etc/fstab</code> 文件,将swap那一行注释掉，如果没有则不管</p><p><strong>禁用SELinux</strong><br>如果安装了则需要禁止掉，如果没有安装则可以跳过此步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo setenforce 0           #临时关闭</span><br><span class="line">sudo vi /etc/selinux/config #永久关闭</span><br><span class="line">SELINUX=permissive</span><br></pre></td></tr></table></figure></p><p><strong>修改内核</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo  cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1                     #开启ipv4转发，允许内置路由</span><br><span class="line">EOF</span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure></p><p><strong>修改时区</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">sudo bash -c &quot;echo &apos;Asia/Shanghai&apos; &gt; /etc/timezone&quot;</span><br></pre></td></tr></table></figure></p><p><strong>安装Docker</strong><br>Step 1: 安装必要的一些系统工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure></p><p>Step 2: 安装GPG证书<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></p><p>Step 3: 写入软件源信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure></p><p>Step 4: 查找Docker-CE的版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache madison docker-ce</span><br></pre></td></tr></table></figure></p><p>Step 5: 安装指定版本的Docker-CE,docker-ce=<a href="如果安装最新版本则无需带版本号">VERSION</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure></p><p>Setp 6: 安装完成后Docker默认就已经启动和加入开机自启了，这点我们不需要再做了，不过可以检查一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br><span class="line">sudo systemctl is-enabled docker</span><br></pre></td></tr></table></figure></p><p>Setp 7:  配置Docker镜像加速以及指定cgroup驱动为systemd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://81z69sad.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>Setp 8:  配置完成后使用 docker info 可以看到修改的配置信息</p><p><strong>配置主机名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">172.26.147.37  master01</span><br><span class="line">172.26.147.36  node01</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>安装Kubeadm Kubelet Kubectl</strong><br>Step 1: 安装必要的程序包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br></pre></td></tr></table></figure></p><p>Step 2: 导入Kubernetes官方包签名密钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br></pre></td></tr></table></figure></p><p>Step 3: 添加Kubernetes仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/apt/sources.list.d/kubernetes.list &lt;&lt; EOF</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>Step 4: 更新仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure></p><p>Step 5: 查找kubeadm kubelet kubectl版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-cache madison kubeadm | grep 1.18</span><br><span class="line">apt-cache madison kubelet | grep 1.18</span><br><span class="line">apt-cache madison kubectl | grep 1.18</span><br></pre></td></tr></table></figure></p><p>目前1.18发布了1.18.0-00 1.18.1-00 1.18.2-00 三个版本</p><p>Step 6: 指定版本安装kubelet kubeadm kubectl(如果安装最新版本则无需带版本号)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install kubeadm kubelet kubectl -y</span><br></pre></td></tr></table></figure></p><h3 id="Master节点部署"><a href="#Master节点部署" class="headerlink" title="Master节点部署"></a>Master节点部署</h3><p><strong>根据需要修改的参数更换以下内容</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version v1.18.0 \</span><br><span class="line">--control-plane-endpoint master01 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--apiserver-advertise-address=0.0.0.0 \</span><br><span class="line">--ignore-preflight-errors=Swap \</span><br><span class="line">--token-ttl 30m</span><br></pre></td></tr></table></figure></p><p><strong>参数说明</strong></p><ul><li>image-repository：初始化过程中会去docker仓库拉去镜像，默认指定的为docker hub(国内访问网速不堪)，所以在此使用–image-repository参数指定阿里云镜像。</li><li>kubernetes-version：指定正在使用的 Kubernetes 程序组件的版本号，需要与 kubelet kubeadm kubectl 的版本号一致。</li><li>control-plane-endpoint: 指定控制平面的固定访问端点，可以是IP地址或DNS名称，会被用于集群管理员及集群组件的kubeconfig配置文件API Server的访问地址；单控制平面部署时可以不使用该选项(如果是单个Master部署则不需要使用该选项，因为等会我们要再加入其它两个Master节点到控制平面，所以这里加上此参数)。</li><li>pod-network-cidr：Pod 网络的地址范围，其值为 CIDR 格式的网络地址，使用 flannel 网络插件时，其默认地址为 10.244.0.0/16。</li><li>service-cidr：Service 的网络地址范围，其值为 CIDR 格式的网络地址，默认地址为 10.96.0.0/12。</li><li>apiserver-advertise-address：API Server 通告给其它组件的IP地址，一般为 Master 节点的IP地址，0.0.0.0 标识节点上所有可用的地址。<br>ignore-preflight-errors：忽略哪些运行时的错误信息，其值为 Swap 时，表示忽略因 swap 未关闭而导致的错误。</li><li>token-ttl：token令牌自动删除时间，默认为24小时，指定为 0 表示永不过期，指定单位可以使 秒s 分m 时h，在node加入Kubernetes集群时需要指定token。<br><strong>初始化过程</strong><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/22/UHburQ.png" alt="01.png" title>                </div>                <div class="image-caption">01.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/22/UHb15q.png" alt="02.png" title>                </div>                <div class="image-caption">02.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/22/UHbNMF.png" alt="03.png" title>                </div>                <div class="image-caption">03.png</div>            </figure><strong>初始化完成</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#您的Kubernetes控制平面初始化成功!</span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">#要开始使用您的集群，您需要作为一个普通用户运行以下程序:</span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">#你需要部署一个网络插件到集群中才能够使Kubernetes网络运转起来</span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">#如果要添加其它控制平面到集群中使用以下命令</span><br><span class="line">You can now join any number of control-plane nodes by copying certificate authorities</span><br><span class="line">and service account keys on each node and then running the following as root:</span><br><span class="line">  kubeadm join k8s-devops.io:6443 --token 8r7sjk.9a31rmcjot9650fe \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256: \</span><br><span class="line">    --control-plane</span><br><span class="line"></span><br><span class="line">#如果要添加数据平面节点到集群中使用以下命令</span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line">kubeadm join k8s-devops.io:6443 --token 8r7sjk.9a31rmcjot9650fe \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:</span><br></pre></td></tr></table></figure></li></ul><p><strong>创建用户</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@master01:~# useradd -m -s /bin/bash k8s  # 创建用户</span><br><span class="line">root@master01:~# passwd k8s  # 设置密码</span><br><span class="line">Enter new UNIX password:</span><br><span class="line">Retype new UNIX password:</span><br><span class="line">passwd: password updated successfully</span><br></pre></td></tr></table></figure></p><p>为普通用户提权<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master01:~# echo &apos;k8s ALL=(ALL:ALL) NOPASSWD:ALL&apos; &gt;&gt; /etc/sudoers.d/k8s</span><br></pre></td></tr></table></figure></p><p>创建权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@master01:~# su k8s  # 切换用户</span><br><span class="line">k8s@master01:/root$    </span><br><span class="line">k8s@master01:/root$ cd /  # 切换目录</span><br><span class="line">k8s@master01:/$ mkdir -p $HOME/.kube                                     #在当前用户家目录下创建.kube目录</span><br><span class="line">k8s@master01:/$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  #复制config命令配置文件到当前用户.kube目录下</span><br><span class="line">k8s@master01:/$ sudo chown $(id -u):$(id -g) $HOME/.kube/config           #修改config文件权限</span><br></pre></td></tr></table></figure></p><p><strong>部署网络插件</strong><br>Step 1: 可以直接在线部署(如果网络下载不了的情况下,也可以先试用浏览器下载后上传到服务器上)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k8s@master01:/$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure></p><p>Step 2: 如果上述方法还是不行，则可以尝试使用我的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://api.0161.org/resources/kube-flannel.yml</span><br></pre></td></tr></table></figure></p><p>Step 3: 上传完后修改文件的属性信息(如上述1,2步骤已完成则直接跳过)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k8s@master01:/$ sudo chown -Rf k8s.k8s kube-flannel.yml</span><br></pre></td></tr></table></figure></p><p>Step 4: 然后指定文件部署网络插件(如上述1,2步骤已完成则直接跳过)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">k8s@master01:/$ kubectl apply -f kube-flannel.yml</span><br><span class="line">podsecuritypolicy.policy/psp.flannel.unprivileged created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class="line">serviceaccount/flannel created</span><br><span class="line">configmap/kube-flannel-cfg created</span><br><span class="line">daemonset.apps/kube-flannel-ds-amd64 created</span><br><span class="line">daemonset.apps/kube-flannel-ds-arm64 created</span><br><span class="line">daemonset.apps/kube-flannel-ds-arm created</span><br><span class="line">daemonset.apps/kube-flannel-ds-ppc64le created</span><br><span class="line">daemonset.apps/kube-flannel-ds-s390x created</span><br></pre></td></tr></table></figure></p><p>Step 5: 查看网络插件是否部署完成(下面有一个叫kube-flannel-ds-amd64的Pod)<br>如果发现你的 flannel Pod 处于 ImagePullBackOff 状态，那么就是 flannel 镜像未拉取成功，而正常的则为 Running状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k8s@master01:/$ kubectl get pods -n kube-system | grep flannel</span><br><span class="line">kube-flannel-ds-amd64-hx9cr        1/1     Running   0          2m3s</span><br></pre></td></tr></table></figure></p><p>Step 6: 查看目前k8s节点信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">k8s@master01:/$ kubectl get nodes</span><br><span class="line">NAME       STATUS   ROLES    AGE   VERSION</span><br><span class="line">master01   Ready    master   65m   v1.18.6</span><br></pre></td></tr></table></figure></p><h3 id="子节点加入到集群"><a href="#子节点加入到集群" class="headerlink" title="子节点加入到集群"></a>子节点加入到集群</h3><p>master节点查看join参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure></p><p>子节点运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join master01:6443 --token 8z8ot9.ylyj39j1po0hgyun     --discovery-token-ca-cert-hash sha256:e0bb3c41**********************************813c84472f65c</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/22/UHb0aR.png" alt="04.png" title>                </div>                <div class="image-caption">04.png</div>            </figure><h2 id="安装Dashboard"><a href="#安装Dashboard" class="headerlink" title="安装Dashboard"></a>安装Dashboard</h2><h3 id="官方文档方式启动-不建议"><a href="#官方文档方式启动-不建议" class="headerlink" title="官方文档方式启动(不建议)"></a>官方文档方式启动(不建议)</h3><p>与端口+ip只能选择一种使用！！！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure></p><p>如遇到无法访问或者网络连接问题可以使用我的备份文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://api.0161.org/resources/recommended.yaml</span><br></pre></td></tr></table></figure></p><p>代理方式启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl proxy</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/22/UHbhdA.png" alt="05.png" title>                </div>                <div class="image-caption">05.png</div>            </figure><h3 id="端口-IP启动-推荐"><a href="#端口-IP启动-推荐" class="headerlink" title="端口+IP启动(推荐)"></a>端口+IP启动(推荐)</h3><p><strong>环境部署</strong><br>下载文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://k8s-1252147235.cos.ap-chengdu.myqcloud.com/dashboard/dashboard.yaml</span><br></pre></td></tr></table></figure></p><p>拉取镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.1</span><br></pre></td></tr></table></figure></p><p>创建服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubectl apply -f dashboard.yaml</span><br></pre></td></tr></table></figure></p><p>浏览器输入 <code>https://IP:30001</code> 打开 （可以使用Safari或者火狐，Chrome无法访问）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/22/UHb7z8.png" alt="06.png" title>                </div>                <div class="image-caption">06.png</div>            </figure><br><strong>绑定用户</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo kubectl create serviceaccount dashboard-admin -n kube-system</span><br><span class="line">kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard</span><br></pre></td></tr></table></figure></p><p><strong>获取Token</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk &apos;/dashboard-admin/&#123;print $1&#125;&apos;)</span><br></pre></td></tr></table></figure></p><p>按Token启动<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/22/UHqnW6.png" alt="07.png" title>                </div>                <div class="image-caption">07.png</div>            </figure></p><h3 id="赋予用户权限"><a href="#赋予用户权限" class="headerlink" title="赋予用户权限"></a>赋予用户权限</h3><p><strong>单命名空间权限文件及绑定</strong><br>创建 role.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kind: Role</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  name: role-dashboard-admin</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;&quot;]</span><br><span class="line">  resources: [&quot;pods&quot;,&quot;services&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]</span><br><span class="line">- apiGroups: [&quot;extensions&quot;, &quot;apps&quot;]</span><br><span class="line">  resources: [&quot;deployments&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]</span><br></pre></td></tr></table></figure></p><p>创建 role-bind.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kind: RoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: role-bind-dashboard-admin</span><br><span class="line">  namespace: kube-system</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: dashboard-admin</span><br><span class="line">  namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: Role</span><br><span class="line">  name: role-dashboard-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure></p><p><strong>集群权限配置及绑定</strong><br>创建 cluster-role.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line"> name: cluster-role-dashboard-admin</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;&quot;]</span><br><span class="line">  resources: [&quot;pods&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]</span><br></pre></td></tr></table></figure></p><p>创建 cluster-role-bind.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line"> name: cluster-role-bind-dashboard-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line"> name: dashboard-admin</span><br><span class="line"> apiGroup: rbac.authorization.k8s.io</span><br><span class="line">roleRef:</span><br><span class="line"> kind: ClusterRole</span><br><span class="line"> name: cluster-role-dashboard-admin</span><br><span class="line"> apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure></p><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f role.yaml</span><br><span class="line">kubectl create -f role-bind.yaml</span><br><span class="line">kubectl create -f cluster-role.yaml</span><br><span class="line">kubectl create -f cluster-role-bind.yaml</span><br></pre></td></tr></table></figure></p><p>完成权限配置，可根据自身情况增加配置！</p><h2 id="常用k8s命令"><a href="#常用k8s命令" class="headerlink" title="常用k8s命令"></a>常用k8s命令</h2><ul><li><p>查看pod列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces   # 查看所有</span><br><span class="line">sudo kubectl get pod -n kube-system # 查看指定命名空间</span><br></pre></td></tr></table></figure></li><li><p>查看service列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service --all-namespaces   # 查看所有</span><br></pre></td></tr></table></figure></li><li><p>删除指定命名空间下的service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete service serviceName --namespace=namespaceName</span><br></pre></td></tr></table></figure></li><li><p>删除指定命名空间下的pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod podName --namespace=namespaceName</span><br></pre></td></tr></table></figure></li><li><p>查看所有deployment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment -A</span><br></pre></td></tr></table></figure></li><li><p>删除指定deployment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete deployment podName</span><br></pre></td></tr></table></figure></li><li><p>查看指定命名空间端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubectl get pod,svc -n kube-system</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;k8s概念&quot;&gt;&lt;a href=&quot;#k8s概念&quot; class=&quot;headerlink&quot; title=&quot;k8s概念&quot;&gt;&lt;/a&gt;k8s概念&lt;/h2&gt;&lt;h3 id=&quot;架构&quot;&gt;&lt;a href=&quot;#架构&quot; class=&quot;headerlink&quot; title=&quot;架构&quot;&gt;&lt;/a&gt;架
      
    
    </summary>
    
      <category term="架构" scheme="https://sbcoder.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Docker" scheme="https://sbcoder.cn/tags/Docker/"/>
    
      <category term="架构" scheme="https://sbcoder.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化及数据备份</title>
    <link href="https://sbcoder.cn/2020/06/10/Redis-Backup.html"/>
    <id>https://sbcoder.cn/2020/06/10/Redis-Backup.html</id>
    <published>2020-06-10T08:14:42.000Z</published>
    <updated>2020-07-23T07:15:15.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><p>Redis作为内存数据库，数据的安全性一定要得到确切的保障，很多情况下，Redis是作为存储数据库来用的，如果遇到断电，关机等突发情况，则容易丢失关键数据，对此，Redis的持久化就显得尤为关键，甚至某些情况下，需要定时去做备份</p><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>可以在每隔一段时间执行一次备份操作，性能比AOF方式更好，RDB是紧凑型文件，但是最多可以执行到5分钟左右，如果再低可能会影响性能<br>RDB相当于 备份数据</p><ul><li>恢复数据快</li><li>性能更好</li><li>可以分时间节点备份文件 </li><li>容易丢失数据</li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>可以按秒级存储数据，由于长期存储，如果发生崩溃事件，它可能只会丢失几秒的数据，相比较来说，可能更安全<br>AOF相当于 备份执行语句</p><ul><li>数据安全性更高</li><li>存储时不占用资源</li><li>可自定 fsync 策略</li><li>恢复速度慢</li></ul><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:latest</span><br><span class="line">docker run -itd --name redis01 -p 6379:6379 redis</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/07/09/UeweFP.png" alt="1.png" title>                </div>                <div class="image-caption">1.png</div>            </figure><p>未完！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Redis持久化&quot;&gt;&lt;a href=&quot;#Redis持久化&quot; class=&quot;headerlink&quot; title=&quot;Redis持久化&quot;&gt;&lt;/a&gt;Redis持久化&lt;/h2&gt;&lt;p&gt;Redis作为内存数据库，数据的安全性一定要得到确切的保障，很多情况下，Redis是作为存储
      
    
    </summary>
    
      <category term="优化" scheme="https://sbcoder.cn/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="数据库" scheme="https://sbcoder.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Redis" scheme="https://sbcoder.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主从同步 读写分离 集群部署</title>
    <link href="https://sbcoder.cn/2020/06/10/MySQL-Cluster-MySQLProxy.html"/>
    <id>https://sbcoder.cn/2020/06/10/MySQL-Cluster-MySQLProxy.html</id>
    <published>2020-06-10T06:25:42.000Z</published>
    <updated>2020-06-10T06:28:17.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>可以使用之前写的<code>Canal</code>阿里巴巴增量订阅更新做简单的主从备份，由于Canal只读取 <code>binary log</code> 日志做增量更新<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/06/05/trt36S.png" alt="canal工作流程图.png" title>                </div>                <div class="image-caption">canal工作流程图.png</div>            </figure><br>通过canal可以做简单的按更新备份也可以通过canal做数据更新，根据更新的内容去更新数据库中其他的字段值<br>也可以通过canal客户端发送消息给 <code>ElasticSearch</code> 等服务，适合多样化复杂的MySQL主从操作<br>通过伪造<code>slave</code>的方式请求<code>binary log</code>消息</p><p>阿里巴巴也为我们提供了更好的基于Canal的分布式数据库同步系统 <code>otter</code><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/06/05/trNja9.jpg" alt="otter工作原理.jpg" title>                </div>                <div class="image-caption">otter工作原理.jpg</div>            </figure></p><p>本文所用Docker目的是一台机器搞定集群功能，实际生产环境中不建议使用Docker</p><h2 id="参考项目："><a href="#参考项目：" class="headerlink" title="参考项目："></a>参考项目：</h2><p><a href="https://github.com/alibaba/otter" target="_blank" rel="noopener">alibaba/otter - 阿里巴巴分布式数据库同步系统(解决中美异地机房)</a><br><a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">alibaba/canal - 阿里巴巴 MySQL binlog 增量订阅&amp;消费组件</a></p><h2 id="通过MySQL配置主从备份"><a href="#通过MySQL配置主从备份" class="headerlink" title="通过MySQL配置主从备份"></a>通过MySQL配置主从备份</h2><p>主从备份，通过配置MySQL做主从备份<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/06/05/trNQE9.jpg" alt="主从备份流程图.jpg" title>                </div>                <div class="image-caption">主从备份流程图.jpg</div>            </figure></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>主从数据库版本保持一致</li><li>需要单独的两台服务器（单台机器可使用Docker，没有测试过）</li><li>需要网络相连，保证主从服务器通信</li><li>表结构不使用外键，使用外键容易造成同步失败</li><li>主键使用无意义自增字段</li><li>同步数据库所用的账号拥有一定的权限，也可以使用root</li></ul><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>参照之前的文章 <a href="https://sbcoder.cn/2020/05/17/Docker_PHP_fpm.html#MySQL-Docker%E5%90%AF%E5%8A%A8">MySQL Docker启动</a><br>启动两个不同的 MySQL 映射不同的端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --name mysql5.7-1 -p 3307:3306 -v /Users/XXX/Downloads/Docker/mysql5.7-1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line">docker run --restart=always --name mysql5.7 -p 3306:3306 -v /Users/XXX/Downloads/Docker/mysql5.7:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure></p><p>进入容器内部 安装vim 或者映射 使用参数 <code>-v</code>  映射位置 <code>/etc/mysql/my.cnf</code> 配置文件亦可</p><p>安装 vim 方式 编辑 my.cnf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install</span><br><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure></p><p>挂载 本地文件 内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line">#</span><br><span class="line"># This program is free software; you can redistribute it and/or modify</span><br><span class="line"># it under the terms of the GNU General Public License, version 2.0,</span><br><span class="line"># as published by the Free Software Foundation.</span><br><span class="line">#</span><br><span class="line"># This program is also distributed with certain software (including</span><br><span class="line"># but not limited to OpenSSL) that is licensed under separate terms,</span><br><span class="line"># as designated in a particular file or component or in included license</span><br><span class="line"># documentation.  The authors of MySQL hereby grant you an additional</span><br><span class="line"># permission to link the program and your derivative works with the</span><br><span class="line"># separately licensed software that they have included with MySQL.</span><br><span class="line">#</span><br><span class="line"># This program is distributed in the hope that it will be useful,</span><br><span class="line"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="line"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="line"># GNU General Public License, version 2.0, for more details.</span><br><span class="line">#</span><br><span class="line"># You should have received a copy of the GNU General Public License</span><br><span class="line"># along with this program; if not, write to the Free Software</span><br><span class="line"># Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA</span><br><span class="line"></span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br><span class="line">!includedir /etc/mysql/mysql.conf.d/</span><br></pre></td></tr></table></figure></p><h3 id="配置主从备份"><a href="#配置主从备份" class="headerlink" title="配置主从备份"></a>配置主从备份</h3><p><em>主节点 使用root 用户 配置</em></p><p>修改配置文件 /etc/mysql/my.cnf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=1</span><br></pre></td></tr></table></figure></p><p>执行命令</p><p><strong>input</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE ON *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;123456&apos;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">SHOW MASTER STATUS;</span><br></pre></td></tr></table></figure></p><p><strong>output</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |      589 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure></p><p><em>从节点 使用root 用户 配置</em><br>修改配置文件 /etc/mysql/my.cnf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=2</span><br></pre></td></tr></table></figure></p><p>执行命令</p><p><strong>input</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&apos;172.17.0.2&apos;,master_user=&apos;root&apos;,master_password=&apos;123456&apos;,master_log_file=&apos;mysql-bin.000001&apos;,master_log_pos=589;</span><br><span class="line">start slave;</span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure></p><p><strong>output</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 172.17.0.2</span><br><span class="line">                  Master_User: root</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 589</span><br><span class="line">               Relay_Log_File: f919535d2d58-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 589</span><br><span class="line">              Relay_Log_Space: 534</span><br><span class="line">              Until_Condition: None</span><br><span class="line">              Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: 380e925e-a645-11ea-a304-0242ac110004</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">               Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>测试 创建一个 test数据库<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/06/10/toQoRg.png" alt="主从数据库同步.png" title>                </div>                <div class="image-caption">主从数据库同步.png</div>            </figure></p><h3 id="监控状态"><a href="#监控状态" class="headerlink" title="监控状态"></a>监控状态</h3><p>可以使用crontab 配合钉钉通知 使用 curl命令通知 主从同步是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> !/bin/bash</span><br><span class="line">array=($(mysql -uroot -p -e "show slave status\G" | grep "Running" | awk '&#123;print $2&#125;'))</span><br><span class="line">if [ "$&#123;array[0]&#125;" == "Yes" ] || [ "$&#123;array[1]&#125;" == "Yes" ]</span><br><span class="line">    then</span><br><span class="line">        echo "Slave is OK"</span><br><span class="line">    else</span><br><span class="line">        echo "Slave is error"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>master数据库处理写操作，slave数据库处理读操作。利用上面配置的主从数据库，使master数据库的变更实时更新到slave节点上，支持事务，但可能会因为某些原因有阻塞现象发生，不可避免的可能会出现数据同步慢的情况<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/06/10/to1KhT.png" alt="读写分离.png" title>                </div>                <div class="image-caption">读写分离.png</div>            </figure></p><p>使用 MySQLProxy 做读写分离</p><blockquote><p>MySQLProxy实际上是在客户端请求与MySQLServer之间建立了一个连接池。所有客户端请求都是发向MySQLProxy，然后经由MySQLProxy进行相应的分析，判断出是读操作还是写操作，分发至对应的MySQLServer上。对于多节点Slave集群，也可以起做到负载均衡的效果。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/06/10/to1Q9U.png" alt="MySQLProxy.png" title>                </div>                <div class="image-caption">MySQLProxy.png</div>            </figure><p>为何要使用MySQLProxy？其实可以不使用，但为了减少代码量，减少开发成本，可以通过运维的手段去做分发处理。<br>常见的开发框架实际上很多是支持读写分离操作不同数据库的，而代理服务器做的则是将这些框架封装好的东西通过代理分发的方式，分别给不同的数据库发送请求，主库只修改，从库只读</p><p><strong>缺点</strong></p><ul><li>目前MySQLProxy仍然是 alpha（内测） 版</li><li>通过lua脚本做的读写分离，MySQL官方并不建议使用</li></ul><h3 id="配置MySQLProxy读写分离"><a href="#配置MySQLProxy读写分离" class="headerlink" title="配置MySQLProxy读写分离"></a>配置MySQLProxy读写分离</h3><p>假定 上述两台服务器 分别为 master slave 那么我们现在需要第三台服务器 proxy<br>proxy需要做中转代理，将接收到的数据库请求分别指向 master 和 slave</p><p>下载 MySQLProxy<br>下载地址：<a href="https://downloads.mysql.com/archives/proxy/" target="_blank" rel="noopener">MySQL Product Archives</a></p><p>由于我的环境为MAC新版，对 MySQLProxy 的支持度并不好，因此并不在本机使用可以参照下面引用的文章参考配置</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/bvcxz10328/article/details/76030278" target="_blank" rel="noopener">Mysql 主从备份完整版</a></li><li><a href="https://www.jianshu.com/p/1eed312e83bf" target="_blank" rel="noopener">MySQL主从备份配置</a></li><li><a href="https://segmentfault.com/a/1190000003716617" target="_blank" rel="noopener">MySQL读写分离介绍及搭建</a></li><li><a href="https://www.jianshu.com/p/cadf337274c1" target="_blank" rel="noopener">MySQL Proxy</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;可以使用之前写的&lt;code&gt;Canal&lt;/code&gt;阿里巴巴增量订阅更新做简单的主从备份，由于Canal只读取 &lt;code&gt;binary l
      
    
    </summary>
    
      <category term="优化" scheme="https://sbcoder.cn/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="MySQL" scheme="https://sbcoder.cn/tags/MySQL/"/>
    
      <category term="运维" scheme="https://sbcoder.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>MAC环境记录</title>
    <link href="https://sbcoder.cn/2020/06/06/myMacOptionPHP.html"/>
    <id>https://sbcoder.cn/2020/06/06/myMacOptionPHP.html</id>
    <published>2020-06-06T06:36:36.000Z</published>
    <updated>2020-07-27T09:08:30.290Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="ca2fc68b5107fb5e09c4efbe68bb06bec48dfe30f64f6f4befb2a1ed3a4d4329">91380cc92a8d30e36eb1f29d05848a5d07f25252816ad7ebdd15eaa580161fc44b711c0fe0b732c54b8c630c92cd3a0206debdf80f9500f81c9eda0038afaa5abaa98e3da8cf435050088541e23c5f09c6b66320a9dca7ba2d391c392b3066757bce8ceb433e29d6eabf9502c31b1a865ce8ce26480c2b3651a02d74e0a7ce70a9ee5b6db44a1870e6ca7aedf4b00f3cec043c7152d98d61a1212fd13720055687b3ce39ae15f81099f94d6605933adc2204646f0187888f5c136e52f8cb04cd796bd502bac4627540219996cb70fccd8388bf36e721dd6f8349cba819a6d88d4f667de02092412f91d84766b8a2280a422fb7e70e0bc39bcae798ac747012e6e2ed57cf472e34826a304e9bd829faacaf317c5fef9e039c1227efa0bf03ecfdb9c87b1bcd896d31ad99aa235eb299d35cbf1a894fe489def3e2a66045caed009655475f4cc8603da3b9b3b2588e762efa626956773e907abf3d5516c0930efee901b143f924f0b2e77c4da40a1d5086a47b83e1325cd908837e451ec35585b8d2e09830865a0fbc72458d93d95bf1f8041d481121707cae85725ea177ac082f7eb4a2d108faa22b2d8656af906db054f592b7000c9651c9f7c203cc53b117c1484ee0b76587256a21893f81233c2c59ee8b8e55d27cad982d8e4e3ebfcae1c52307f6646a344b171657c6692e26d1c82136fb2cef78d3fc794121af3f0bb203abc2aa315c9a2d064a929e87f3bd604769693e87d62e5f6c4584f54148bd89faec4771aec625c9a3a4bbb07751b69b44c7f064379815bc2b509aedc1a02db3026bdc3319ebbfe2e6ebcad9f2bba9a7884feed4a0f8492374237b7692e7a8017c3bf2ace473be6d847ee17d89e69691c663d16fc07f52cd866a6b8e924114a5fd3d82f1f57b7e4ce0163e8e8812bbd5e6f25cdc72110de39baeea10209a556ed0b4eb2b0c28b3c41afca7281df22cf43ae34e23891088e886296772e155586d46de30ee6a30f9421962e440b7cbd4641c9beeec5e11aa4693b86797a9b2b84f0797cd524a00b80e80244bb3b8667fb0bdd69e6ef02585e0fe61cbbc3f09c57311ad3ad3d427d29aef76fc1f2400ec63b32f93922919c9c3cbd552404ecc32b07768291e5a7511d40caf1de0b1b067f7ccf591b83670b13ca67dbb019cbb07a5e18df9a1b77e8ef5f2cf30f01b6f603ce22591f7892e0729a084f54f37d502118e14106ec00e6be97b1ecddbd35ae5cb1bc78db2348d76afdfa319414d91736cf243f2980d65007bdd0bffb83914a2ab1bb063a73189be8f35fde187448e9a6a6f4db636cadd35ef2a580a4a5bc3421a65b1600576c2a96142531ddae3fe4f931a7e698bd8f78918dd296d9689dc18412f0ca793898a9780838c558641c216597b7d61f273f5602b2baeec75a57252f8970b3dab1894ded04ce3a05a49f4a895118fd7eb53f2de4765130c501bf020f02f3a6485645d0e0a53114a2342bfcb092cb1ff16aabdd5d68d6282032f600a92e79fae2f83c14d50592f46f942952cd9eb3d792b78665190abb91af237d97aa024bff5d7d16ba0c15497662fe16a2146841b8d0317363e70c038ba7eb003d249cd</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="note" scheme="https://sbcoder.cn/categories/note/"/>
    
    
      <category term="笔记" scheme="https://sbcoder.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch &amp; ELK日志分析 从零开始搭建到使用</title>
    <link href="https://sbcoder.cn/2020/05/27/ELK_Stack.html"/>
    <id>https://sbcoder.cn/2020/05/27/ELK_Stack.html</id>
    <published>2020-05-27T12:34:16.000Z</published>
    <updated>2020-06-04T08:31:49.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>基于Lucene的搜索服务器，它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。<br>更适用于集群部署，适合各类 分词，全文搜索，通过建立索引（分片，按节点分片）来实现更快的搜索<br>Elasticsearch是与Logstash的数据收集和日志解析引擎以及Kibana的分析和可视化平台一起开发的。这三个产品被设计成一个集成解决方案，称为“Elastic Stack”（以前称为“ELK stack”）。<br>本文只做单节点运行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/06/03/tU7KfS.png" alt="ELK.png" title>                </div>                <div class="image-caption">ELK.png</div>            </figure><h3 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h3><blockquote><p>Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。 作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。</p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>单点服务器维持稳定可能需要常驻内存 4G 以上</li><li>单点ELK维持稳定可能需要CPU 4核心 以上</li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.cnblogs.com/fbtop/p/11005469.html" target="_blank" rel="noopener">Docker安装部署ELK教程 (Elasticsearch+Kibana+Logstash+Filebeat)</a></li><li><a href="https://zhang.ge/5135.html" target="_blank" rel="noopener">零门槛！基于Docker快速部署ES集群</a></li></ul><h2 id="下载集群所需镜像-zookeeper-kafka"><a href="#下载集群所需镜像-zookeeper-kafka" class="headerlink" title="下载集群所需镜像 zookeeper kafka"></a>下载集群所需镜像 zookeeper kafka</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull zookeeper</span><br><span class="line">docker pull wurstmeister/kafka</span><br></pre></td></tr></table></figure><h2 id="单节点无内网IP使用"><a href="#单节点无内网IP使用" class="headerlink" title="单节点无内网IP使用"></a>单节点无内网IP使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create elkwork</span><br></pre></td></tr></table></figure><p>创建内部网络后在每次 docker run 的时候 增加参数 <code>--net elkwork</code></p><h2 id="elastic相关"><a href="#elastic相关" class="headerlink" title="elastic相关"></a>elastic相关</h2><ul><li><p>旧版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.elastic.co/elasticsearch/elasticsearch:5.6.8</span><br><span class="line">docker pull docker.elastic.co/kibana/kibana:5.6.8</span><br><span class="line">docker pull docker.elastic.co/logstash/logstash:5.6.8</span><br></pre></td></tr></table></figure></li><li><p>新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.elastic.co/elasticsearch/elasticsearch:7.7.0</span><br><span class="line">docker pull docker.elastic.co/kibana/kibana:7.7.0</span><br><span class="line">docker pull docker.elastic.co/logstash/logstash:7.7.0</span><br><span class="line">docker pull store/elastic/filebeat:7.7.0</span><br></pre></td></tr></table></figure></li></ul><h2 id="启动elasticsearch-自行替换版本"><a href="#启动elasticsearch-自行替换版本" class="headerlink" title="启动elasticsearch 自行替换版本"></a>启动elasticsearch 自行替换版本</h2><p><code>&quot;discovery.type=single-node&quot;</code> 单节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:5.6.8</span><br></pre></td></tr></table></figure></p><p>默认用户名            默认密码<br>elastic                changeme                 </p><p>测试是否已经连通<code>-u elastic:changeme</code> 验权<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u elastic:changeme localhost:9200</span><br></pre></td></tr></table></figure></p><p>浏览器端口访问测试<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/05/27/tAsJj1.png" alt="elasticsearch.png" title>                </div>                <div class="image-caption">elasticsearch.png</div>            </figure></p><h2 id="elasticsearch-各类语法"><a href="#elasticsearch-各类语法" class="headerlink" title="elasticsearch 各类语法"></a>elasticsearch 各类语法</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>浏览器访问<br><code>http://xxx.xx.xxx.xx:9200/_cat/indices?v</code>  查看当前节点的所有 Index<br><code>http://xxx.xx.xxx.xx:9200/_mapping?pretty=true</code>  列出每个 Index 所包含的 Type</p><p>验权机制增加参数  <code>-u elastic:changeme</code> 验权</p><p>命令行访问<br><code>curl -u elastic:changeme -X PUT &#39;localhost:9200/weather&#39;</code> 可以直接向 Elastic 服务器发出 PUT 请求<br><code>curl -u elastic:changeme -X DELETE &#39;localhost:9200/weather&#39;</code>  发出 DELETE 请求，删除这个 Index</p><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &apos;localhost:9200/account/person&apos; -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;李四&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;系统管理&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;localhost:9200/account/person/1?pretty=true&apos;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> : <span class="string">"accounts"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> : <span class="string">"person"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span> : &#123;</span><br><span class="line">    <span class="attr">"user"</span> : <span class="string">"张三"</span>,</span><br><span class="line">    <span class="attr">"title"</span> : <span class="string">"工程师"</span>,</span><br><span class="line">    <span class="attr">"desc"</span> : <span class="string">"数据库管理"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE &apos;localhost:9200/accounts/person/1&apos;</span><br></pre></td></tr></table></figure><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &apos;localhost:9200/accounts/person/1&apos; -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;user&quot; : &quot;张三&quot;,</span><br><span class="line">    &quot;title&quot; : &quot;工程师&quot;,</span><br><span class="line">    &quot;desc&quot; : &quot;数据库管理，软件开发&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><h3 id="返回所有记录"><a href="#返回所有记录" class="headerlink" title="返回所有记录"></a>返回所有记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;localhost:9200/accounts/person/_search&apos;</span><br></pre></td></tr></table></figure><ul><li>索引 ：<code>/Index/Type/_search</code></li><li>total：返回记录数，本例是2条。</li><li>max_score：最高的匹配程度，本例是1.0。</li><li>hits：返回的记录组成的数组。</li></ul><h3 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;localhost:9200/accounts/person/_search&apos;  -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;软件 系统&quot; &#125;&#125;,</span><br><span class="line">  &quot;from&quot;: 1</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><ul><li>size 返回数量</li><li>from 开始位置</li><li>OR搜索，当前搜索的示例是 <code>软件</code>或<code>系统</code></li><li>AND搜索示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;软件&quot; &#125; &#125;,</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;系统&quot; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">全文搜索引擎 Elasticsearch 入门教程</a></li></ul><h2 id="启动kibana-自行替换版本"><a href="#启动kibana-自行替换版本" class="headerlink" title="启动kibana 自行替换版本"></a>启动kibana 自行替换版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kibana -p 8001:5601 docker.elastic.co/kibana/kibana:5.6.8</span><br></pre></td></tr></table></figure><p>kibana 容器内部修改配置ip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vi ./config/kibana.yml</span><br></pre></td></tr></table></figure></p><p>重启容器使配置生效</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/05/27/tAsApj.png" alt="kibana.png" title>                </div>                <div class="image-caption">kibana.png</div>            </figure><h2 id="配置-logstash"><a href="#配置-logstash" class="headerlink" title="配置 logstash"></a>配置 logstash</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/tjy/docker/logstash/</span><br><span class="line">mkdir /home/tjy/docker/logstash/conf.d/</span><br><span class="line">vi /home/tjy/docker/logstash/logstash.yml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.config: /usr/share/logstash/conf.d/*.conf</span><br><span class="line">path.logs: /var/log/logstash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/tjy/docker/logstash/conf.d/test.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">    codec =&gt; &quot;json&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123; </span><br><span class="line">hosts =&gt; [&quot;xxx.xx.xxx.xx:9200&quot;]</span><br><span class="line">user =&gt; elastic </span><br><span class="line">    password =&gt; changeme </span><br><span class="line">&#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动logstash并挂载"><a href="#启动logstash并挂载" class="headerlink" title="启动logstash并挂载"></a>启动logstash并挂载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 8011:5044 -p 9600:9600 --name logstash -v /home/tjy/docker/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml -v /home/tjy/docker/logstash/conf.d/:/usr/share/logstash/conf.d/ docker.elastic.co/logstash/logstash:5.6.8</span><br></pre></td></tr></table></figure><h2 id="配置-filebeat"><a href="#配置-filebeat" class="headerlink" title="配置 filebeat"></a>配置 filebeat</h2><p>下载 通用配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /Users/XXX/Downloads/Docker/filebeat/</span><br><span class="line">cd /Users/XXX/Downloads/Docker/filebeat</span><br><span class="line">wget https://raw.githubusercontent.com/elastic/beats/7.1/deploy/docker/filebeat.docker.yml</span><br><span class="line">vi filebeat.docker.yml</span><br></pre></td></tr></table></figure><p>配置监听 Nginx log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">filebeat.config:</span><br><span class="line">  modules:</span><br><span class="line">    path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">    reload.enabled: false</span><br><span class="line"></span><br><span class="line">filebeat.autodiscover:</span><br><span class="line">  providers:</span><br><span class="line">    - type: docker</span><br><span class="line">      hints.enabled: true</span><br><span class="line"></span><br><span class="line">processors:</span><br><span class="line">- add_cloud_metadata: ~</span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">  - /var/log/nginx/*.log</span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [&apos;logstash:5044&apos;]</span><br></pre></td></tr></table></figure><h2 id="filebeat-配合-logstash-挂载并启动"><a href="#filebeat-配合-logstash-挂载并启动" class="headerlink" title="filebeat 配合 logstash 挂载并启动"></a>filebeat 配合 logstash 挂载并启动</h2><p>以下映射的路径为我自己电脑的路径，需要自行修改！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name filebeat --user=root -d --net elkwork -v /usr/local/var/log/nginx/:/var/log/nginx/ -v /Users/XXX/Downloads/Docker/filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml -v /var/run/docker.sock:/var/run/docker.sock store/elastic/filebeat:7.7.0</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/06/03/tUHz8O.png" alt="success.png" title>                </div>                <div class="image-caption">success.png</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;基于L
      
    
    </summary>
    
      <category term="架构" scheme="https://sbcoder.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="ElasticSearch" scheme="https://sbcoder.cn/tags/ElasticSearch/"/>
    
      <category term="kibana" scheme="https://sbcoder.cn/tags/kibana/"/>
    
      <category term="Logstash" scheme="https://sbcoder.cn/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装 PHP-fpm</title>
    <link href="https://sbcoder.cn/2020/05/17/Docker_PHP_fpm.html"/>
    <id>https://sbcoder.cn/2020/05/17/Docker_PHP_fpm.html</id>
    <published>2020-05-17T04:54:47.000Z</published>
    <updated>2020-06-05T09:10:42.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建-uploads-ini"><a href="#创建-uploads-ini" class="headerlink" title="创建 uploads.ini"></a>创建 uploads.ini</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file_uploads = On</span><br><span class="line">memory_limit = 64 M</span><br><span class="line">upload_max_filesize = 20M</span><br><span class="line">post_max_size = 20M</span><br><span class="line">max_execution_time = 600</span><br></pre></td></tr></table></figure><h2 id="创建-Dockerfile"><a href="#创建-Dockerfile" class="headerlink" title="创建 Dockerfile"></a>创建 Dockerfile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FROM php:7.3-fpm</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y libwebp-dev libjpeg-dev libpng-dev libfreetype6-dev</span><br><span class="line"></span><br><span class="line">EXPOSE 9000</span><br><span class="line"></span><br><span class="line">#上传配置成20M</span><br><span class="line">COPY uploads.ini /usr/local/etc/php/conf.d</span><br><span class="line"></span><br><span class="line">RUN docker-php-ext-install mysqli</span><br><span class="line">RUN docker-php-ext-install pdo</span><br><span class="line">RUN docker-php-ext-install pdo_mysql</span><br><span class="line">RUN pecl install redis-4.2.0 &amp;&amp; docker-php-ext-enable redis</span><br><span class="line">RUN docker-php-ext-install bcmath</span><br><span class="line">RUN docker-php-ext-configure gd  --with-webp-dir=/usr/include/webp --with-png-dir=/usr/include --with-jpeg-dir=/usr/include --with-freetype-dir=/usr/include/freetype2</span><br><span class="line">RUN docker-php-ext-install gd</span><br></pre></td></tr></table></figure><h2 id="Docker-build"><a href="#Docker-build" class="headerlink" title="Docker build"></a>Docker build</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ai0by/php-fpm73:v1 .</span><br></pre></td></tr></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><p>挂载物理机内容到 容器内部 可以修改下方的 <code>/var/www/html/workspace</code> 为你的项目地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /var/www/html/workspace:/var/www/html/workspace  -p 9002:9000 -d php73:0.1</span><br></pre></td></tr></table></figure><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>修改 <code>fastcgi_pass</code> 后面的 值为 <code>127.0.0.1:9002</code></p><p>LNMP用户 修改 <code>/usr/local/nginx/conf/enable-php-pathinfo.conf</code></p><p>将 <code>fastcgi_pass  unix:/tmp/php-cgi.sock;</code> 修改为 <code>fastcgi_pass  127.0.0.1:9002;</code></p><p>其他环境与此类似，直接改即可</p><h2 id="MySQL-Docker启动"><a href="#MySQL-Docker启动" class="headerlink" title="MySQL Docker启动"></a>MySQL Docker启动</h2><p>自行修改 挂载路径 以及 密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --name mysql5.7 -p 3306:3306 -v /Users/XXX/Downloads/Docker/mysql5.7:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure></p><p>Nginx 个人不习惯扔Docker中，因此暂时不管</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建-uploads-ini&quot;&gt;&lt;a href=&quot;#创建-uploads-ini&quot; class=&quot;headerlink&quot; title=&quot;创建 uploads.ini&quot;&gt;&lt;/a&gt;创建 uploads.ini&lt;/h2&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="PHP" scheme="https://sbcoder.cn/categories/PHP/"/>
    
    
      <category term="fpm" scheme="https://sbcoder.cn/tags/fpm/"/>
    
      <category term="nginx" scheme="https://sbcoder.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Workerman 适合PHPer使用的Socket通讯框架</title>
    <link href="https://sbcoder.cn/2020/05/14/workerman.html"/>
    <id>https://sbcoder.cn/2020/05/14/workerman.html</id>
    <published>2020-05-14T13:48:33.000Z</published>
    <updated>2020-05-14T13:51:53.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>适用于 客户端-服务端 客户端-客户端 一对多 多对多的关系，多个客户端之间的长连接通信，聊天室，在线客服，服务端反向推送播报消息</p><p>特性：多进程，长连接，高并发，常驻内存…</p><ul><li>客户端与worker进程<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/05/14/Y0lDgg.png" alt="客户端与worker进程.png" title>                </div>                <div class="image-caption">客户端与worker进程.png</div>            </figure></li><li>主进程与worker子进程<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/05/14/Y0lrvQ.png" alt="主进程与worker子进程.png" title>                </div>                <div class="image-caption">主进程与worker子进程.png</div>            </figure></li></ul><p>使用Workerman可以做很多有趣的事。（工业自动化，互联网工业，PLC机械报警…），通过长连接取数据，操作数据等，但PHP并不适用于工业领域。做一个仿im聊天工具，除了前端展示界面，后端也要考虑全面，更多的依赖于长连接。</p><p>本文参考 <a href="http://doc.workerman.net" target="_blank" rel="noopener">workerman官方文档</a><br>本文参考 <a href="https://github.com/hsu1943/thinksocketio" target="_blank" rel="noopener">thinksocketio - 基于socketio的聊天室Demo</a></p><h2 id="安装Workerman框架"><a href="#安装Workerman框架" class="headerlink" title="安装Workerman框架"></a>安装Workerman框架</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>创建一个文件夹 我这里使用 <code>testWebSocket</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir testWebSocket</span><br><span class="line">cd testWebSocket</span><br></pre></td></tr></table></figure></p><ul><li>git形式安装(推荐)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/walkor/Workerman</span><br></pre></td></tr></table></figure></li></ul><p>根据官方文档创建一个示例 在 <code>testWebSocket</code> 下创建一个 PHP文件 test.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Worker</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/Workerman/Autoloader.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：这里与上个例子不同，使用的是websocket协议</span></span><br><span class="line">$ws_worker = <span class="keyword">new</span> Worker(<span class="string">"websocket://0.0.0.0:2000"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动4个进程对外提供服务</span></span><br><span class="line">$ws_worker-&gt;count = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当收到客户端发来的数据后返回hello $data给客户端</span></span><br><span class="line">$ws_worker-&gt;onMessage = <span class="function"><span class="keyword">function</span><span class="params">($connection, $data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 向客户端发送hello $data</span></span><br><span class="line">    $connection-&gt;send(<span class="string">'hello '</span> . $data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行worker</span></span><br><span class="line">Worker::runAll()</span><br></pre></td></tr></table></figure></p><h3 id="前端测试"><a href="#前端测试" class="headerlink" title="前端测试"></a>前端测试</h3><p>前端测试例子代码 直接在Google浏览器执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://127.0.0.1:2000"</span>);</span><br><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"连接成功"</span>);</span><br><span class="line">    ws.send(<span class="string">'tom'</span>);</span><br><span class="line">    alert(<span class="string">"给服务端发送一个字符串：tom"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"收到服务端的消息："</span> + e.data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/05/14/YBkdJA.png" alt="执行界面.png" title>                </div>                <div class="image-caption">执行界面.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/05/14/YBkaid.png" alt="服务端界面.png" title>                </div>                <div class="image-caption">服务端界面.png</div>            </figure><h3 id="Workermen框架支持的协议"><a href="#Workermen框架支持的协议" class="headerlink" title="Workermen框架支持的协议"></a>Workermen框架支持的协议</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$websocket_worker = <span class="keyword">new</span> Worker(<span class="string">'websocket://0.0.0.0:2345'</span>);</span><br><span class="line"><span class="comment">// text协议</span></span><br><span class="line">$text_worker = <span class="keyword">new</span> Worker(<span class="string">'text://0.0.0.0:2346'</span>);</span><br><span class="line"><span class="comment">// frame协议</span></span><br><span class="line">$frame_worker = <span class="keyword">new</span> Worker(<span class="string">'frame://0.0.0.0:2347'</span>);</span><br><span class="line"><span class="comment">// tcp Worker，直接基于socket传输，不使用任何应用层协议</span></span><br><span class="line">$tcp_worker = <span class="keyword">new</span> Worker(<span class="string">'tcp://0.0.0.0:2348'</span>);</span><br><span class="line"><span class="comment">// udp Worker，不使用任何应用层协议</span></span><br><span class="line">$udp_worker = <span class="keyword">new</span> Worker(<span class="string">'udp://0.0.0.0:2349'</span>);</span><br><span class="line"><span class="comment">// unix domain Worker，不使用任何应用层协议</span></span><br><span class="line">$unix_worker = <span class="keyword">new</span> Worker(<span class="string">'unix:///tmp/wm.sock'</span>);</span><br></pre></td></tr></table></figure><h2 id="整合ThinkPHP"><a href="#整合ThinkPHP" class="headerlink" title="整合ThinkPHP"></a>整合ThinkPHP</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Workermen是一个成熟的单独框架，在ThinkPHP中也可以使用Composer安装对应的扩展来使用，这里使用了针对PHP开发的扩展 PHPSocket.IO。<br>PHPSocket.IO设计的目标是利用PHP构建能够在不同浏览器和移动设备上良好运行的实时应用，如实时分析系统、在线聊天室、在线客服系统、评论系统、WebIM等。 PHPSocket.IO与workerman的区别是，PHPSocket.IO基于workerman开发，workerman有的特性PHPSocket.IO都支持。 PHPSocket.IO最大的优势是对各种浏览器的兼容性更好。</p><h3 id="安装及引用"><a href="#安装及引用" class="headerlink" title="安装及引用"></a>安装及引用</h3><p>使用Composer 安装对应的扩展<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require workerman/phpsocket.io</span><br></pre></td></tr></table></figure></p><p>在编辑代码时引用对应的扩展即可<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Worker</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPSocketIO</span>\<span class="title">SocketIO</span>;</span><br></pre></td></tr></table></figure></p><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><p>创建一个服务端 <code>application\socketio\controller\server.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">socketio</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Worker</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPSocketIO</span>\<span class="title">SocketIO</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Db</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 在2021端口创建服务</span></span><br><span class="line">        $io = <span class="keyword">new</span> SocketIO(<span class="number">2021</span>);</span><br><span class="line">        $io-&gt;on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span><span class="params">($socket)</span><span class="title">use</span><span class="params">($io)</span></span>&#123;</span><br><span class="line">            $socket-&gt;on(<span class="string">'chat message'</span>, <span class="function"><span class="keyword">function</span><span class="params">($msg)</span><span class="title">use</span><span class="params">($io)</span></span>&#123;</span><br><span class="line">                $io-&gt;emit(<span class="string">'chat message'</span>, $msg);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 监听到新的客户端连接即在服务端输出'new connection'</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'new connection'</span>.<span class="string">"\n"</span>;</span><br><span class="line">            <span class="comment">// 并向服务端发送'连接成功'</span></span><br><span class="line">            $socket-&gt;emit(<span class="string">'success'</span>, <span class="string">'连接成功'</span>);</span><br><span class="line">            <span class="comment">// 服务端发送消息过来</span></span><br><span class="line">            $socket-&gt;on(<span class="string">'sendMsg'</span>, <span class="function"><span class="keyword">function</span><span class="params">($msg)</span><span class="title">use</span><span class="params">($io)</span></span>&#123;</span><br><span class="line">                <span class="comment">// 在服务端输出消息</span></span><br><span class="line">                <span class="keyword">echo</span> $msg.<span class="string">"\n"</span>;</span><br><span class="line">                <span class="comment">// 在收到的消息前面拼接'收到'后向客户端发送回去</span></span><br><span class="line">                $io-&gt;emit(<span class="string">'sendMsg'</span>, <span class="string">'收到"'</span>.$msg.<span class="string">'"'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动服务</span></span><br><span class="line">        Worker::runAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于 Workermen 是一个独立于PHP程序使用的单一文件，需要单独用一个命令行来启动的，他完全可以独立使用，因此并不推荐使用TP框架来整合，但如果有这个需求，也可以在 <code>/public</code>目录下生成一个文件来绑定控制器，例如绑定 到 <code>socketio/Server</code><br>创建文件 <code>public/server.php</code> , 输入以下内容<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// [ 应用入口文件 ]</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载基础文件</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../thinkphp/base.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行应用并响应（绑定）</span></span><br><span class="line">Container::get(<span class="string">'app'</span>)-&gt;bind(<span class="string">'socketio/Server'</span>)-&gt;run()-&gt;send();</span><br></pre></td></tr></table></figure></p><p>执行时 直接在Shell中运行该PHP文件即可，剩下的交给TP的机制<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /public</span><br><span class="line">php server.php</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/05/14/Y0J6AA.png" alt="执行结果.png" title>                </div>                <div class="image-caption">执行结果.png</div>            </figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>根据通信行为可以衍生出各类应用，目前websocket已经是各大公司都需要的技术，会websocket就多了一份机会！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;适用于 客户端-服务端 客户端-客户端 一对多 多对多的关系，多个客户端之间的长连接通信，聊天室，在线客服，服务端反向推送播报消息&lt;/p&gt;

      
    
    </summary>
    
      <category term="PHP" scheme="https://sbcoder.cn/categories/PHP/"/>
    
    
      <category term="socket" scheme="https://sbcoder.cn/tags/socket/"/>
    
      <category term="通讯" scheme="https://sbcoder.cn/tags/%E9%80%9A%E8%AE%AF/"/>
    
      <category term="workerman" scheme="https://sbcoder.cn/tags/workerman/"/>
    
  </entry>
  
  <entry>
    <title>UnblockNeteaseMusic 解锁网易云音乐灰色歌曲</title>
    <link href="https://sbcoder.cn/2020/05/09/UnblockNeteaseMusic.html"/>
    <id>https://sbcoder.cn/2020/05/09/UnblockNeteaseMusic.html</id>
    <published>2020-05-09T13:52:19.000Z</published>
    <updated>2020-05-09T13:53:34.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-安装运行服务端"><a href="#Docker-安装运行服务端" class="headerlink" title="Docker 安装运行服务端"></a>Docker 安装运行服务端</h2><p>基于<a href="https://github.com/nondanee/UnblockNeteaseMusic" target="_blank" rel="noopener">nondanee/UnblockNeteaseMusic</a>的音乐解锁代理服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=unblockneteasemusic -d -p 8888:8080 nondanee/unblockneteasemusic</span><br></pre></td></tr></table></figure><p>日志界面 </p><p><img src="https://s1.ax1x.com/2020/05/09/YQcznA.png" alt="Docker内部日志"></p><h2 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h2><table><thead><tr><th style="text-align:left">平台</th><th style="text-align:left">基础设置</th></tr></thead><tbody><tr><td style="text-align:left">Windows</td><td style="text-align:left">设置 &gt; 工具 &gt; 自定义代理 (客户端内)</td></tr><tr><td style="text-align:left">UWP</td><td style="text-align:left">Windows 设置 &gt; 网络和 Internet &gt; 代理</td></tr><tr><td style="text-align:left">Linux</td><td style="text-align:left">系统设置 &gt; 网络 &gt; 网络代理</td></tr><tr><td style="text-align:left">macOS</td><td style="text-align:left">系统偏好设置 &gt; 网络 &gt; 高级 &gt; 代理</td></tr><tr><td style="text-align:left">Android</td><td style="text-align:left">WLAN &gt; 修改网络 &gt; 高级选项 &gt; 代理</td></tr><tr><td style="text-align:left">iOS</td><td style="text-align:left">无线局域网 &gt; HTTP 代理 &gt; 配置代理</td></tr></tbody></table><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/05/09/YQcvXd.png" alt="Windows配置截图" title>                </div>                <div class="image-caption">Windows配置截图</div>            </figure><p>将ip设置为服务器ip即可，映射内部的8080到外部8888端口</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/05/09/YQcj6H.png" alt="效果" title>                </div>                <div class="image-caption">效果</div>            </figure><p>当播放或者下载时，日志会记录，解析过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-安装运行服务端&quot;&gt;&lt;a href=&quot;#Docker-安装运行服务端&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装运行服务端&quot;&gt;&lt;/a&gt;Docker 安装运行服务端&lt;/h2&gt;&lt;p&gt;基于&lt;a href=&quot;https://git
      
    
    </summary>
    
      <category term="折腾" scheme="https://sbcoder.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Docker" scheme="https://sbcoder.cn/tags/Docker/"/>
    
      <category term="音乐" scheme="https://sbcoder.cn/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>2020年计划</title>
    <link href="https://sbcoder.cn/2020/02/19/2020.html"/>
    <id>https://sbcoder.cn/2020/02/19/2020.html</id>
    <published>2020-02-19T01:50:52.000Z</published>
    <updated>2020-07-24T05:46:59.499Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="053ed53b8cc9040765100b77cf3a4b084d54d14fa89a5940d3574b9cb762faa8">1df4fcdb546d6daac4642e86adf0e2976145577a64659901500b2260506a8f5118d1e036f14263f9c905e6bbab4ef5cd991ed13b1e39597451be21addafdaa79414ab771ae8ee99236fea5218e028cacbda395a466c7d16b6909954e6da4b3b425cecf77bc04c8240dcd2acdb4ca8df44bf7cafe3d2f03f0204df3ed4e324a514e6b8400e9cb5c53469304e86f30ec3a5fe6796a1603062d54982119a6eda7055db228edb872792bff01a5039a9b7e579e6d451b4219575609fb823490d95166ae1c51e4c6b723cf494242908363071671f1707dfbeb5251fec0adce6800aec8f3c9b3218f55d8aa59ebadb905a3353b1ec2a098fe60153ee87f29afbff5de4b01cdcb7acb29246d03d4ee77780762ed7ba01d67959e286682da9e437441ee65c09592df521a0df126b923d344d9e6439395fb15d00cda5fb5f02b245e24342f071c05634a6e66cd7740cfbb11cc91033dc0549ee58eb7d5ac4370df2cae0084daf0ffe3d759fa38d20ff6d166f98e8f84c18c20a98cc1a91dc1eeca0975702665cc60550125aca52fdca3a00a22d78dbccb6fd4b95440611c8870c783ed47e5f92221b5abd2dc08a5c3ab252b63bb9dd3245f262a048f5016c52422600e56687ebf59e364548f546eb18de69f44e936b37aa89aa70d7de6e356797acd3a0e27c303b47fff0cb59387fbe56d6aaa1595a59e98c68104d1daf36779d2a20e897ed0b790decd8d4ee2f7509d6dbcd0badc48f2b0adb81fc8cee78485190e43297bb7df04b55a6d98da34ab28d53090fcbb6547fcb6491ff75ee0a4266d61faad5caa9fc85479db04f525c7ed9f55a966b84cb1e69baa16dcd809fdcb324e1db9a6fbd083794d83c86ac5f2a3333737b4840f4f47968ab5247f9c5fc01cc0e2c066819bc41cb510dfd3a144c2c2da6da530aab2d255a48d51643baea726c7c12863f6f6d51e29c2de380b97ab05cbf6f4ebe3d764a0c4e488e3f4ce527609df903d3e9db2591ba7764ad74d89416dc69df84ea1a3ba40dd40af2a51e398224bd0193d8d4d0b8a4b3472193f902323a3c1b88c32b8a26f729d6b29b3979dbaadf53eb7bb4cadc277176d24693715a13c4f69cf90a16cd453d67b5e2ef3d78c7150ea4d73186a224397cc85f45e2f768e1e950a22fd7169fbde0cd4de5f47092daf4b3b79d36b1311cfa0704a693cb2abd061e41b48cfe12039185a9c8cc59289e035053fa809fb7cfa8aec52afc254d7da819c34e3b1aef51ced4b33fa9db6bf8c3b1985cc3b2ff2f18fee1bbcb4b93889f7e171f7b6dd8239e036a7092ca3c713d71917edc5571ddb11224febada28e858e396f31b0300a8072102c0da695d26aab993461521d3bb276723d78818481afe3b5ede1120a20bb538fae15c63175b357c5dfdd184073c2c458c19aee9acd6744968ac966577348c68c7fae550cfbc235222908a73e29542bfc27e1ad8be70c741afbe2f5af084736f2353475112608e7a12d1c03b0c7f1d028e6a5d29cec0025fb035deaa8c8a4f8acf68d5cf29a65cf66f9422e5378725752e5f6e9564edefe43a86b6754548b45921341e90ece118428b94609d33252b0163910c52d062a0ce5f749bdada7df465b6dd1ee2d38d1260f15424ff529e62762ec767682d34cfaf77d5585e7a05d53f72415015c2462b8d1e85aa677392d2cd1f365165e760e1fc97484783fd21342195f67fe1e6c303807ca0fab8fe290a931d88ae4688cc2658e8421a0d538e49fa1bf7b540b0cec4e8afa2a7c5d0f56dd09f0d2f82ce01fd2f2b6964a5e1089c105d8ac80acfbdd03bc4bf856628d5e04db995c519ab64e78deb41819afc529b847ca2df47f9326ce12c40b28563199bbe25b05b99440ff09b633751cfaac0511b94304b964bb009a1bff9ebee94e2a42ba6e10c03fff12e0a5f821b97b161cee10c5d9ddcbb9a62e538dcc2de3f0c4c94671e201114522cc314b207df398b9ee3bd4de580f0dfb0389dfe51c668b61bc838dc2987ba8743d5e3493bf21abc654dde33935f8c41f4a1ccc40fb2cd2b11739049965ed5bd56230b702575a8d5ab6c89aa2bc8bc28c3088552f2217058cbf3adf226b7bb7a90717c33bb25541c22b216ee08ebb7f7b022b8c702a2351cad8d195daee87505a43db342b94bbfab718db85009616f62d4068e0d773ceff4fd965bdc32a4a63b9e9565c3375315cc988a9f6314c3bf4a2665ba8b99c9b85ceb21fce17385c3167e6233a76ecd325413ba7a04009b9b7f6ce90946b2c4333b6ae0ed73815b01c62f871741c16a80ddd8a277b97391fc7465c20b919c7581260a648e253942b2ee997f9424782cfe1b814fc3cf57925af127337d888261a6f094fc413153048507b8034051ee2efb144e7cfb081d907540e1769f712fba638a5ab1fdd097cdaf0cdcebd9d6963fb863f8cafe7afe54a2fdc2cb7ebdb0d14b88e8b3c5d7ea51027c4d7f9e86f5bf8e0429570d191e27e5e41830e1552334af4d48db5743734111aa496e4005af58a50c473a9fcc23fd9c5c018934ac8ac020b0c3005e74011f48514cc484ac86afb73edc73b33fd25194c9249417f79e2593f234c3b1f3701cbfcde9a6aef27003c1e53c79e85cac72effb0fd246954f41935e85ad5139ada5d99c6ba1f06b6c40d5a8e79d6a556ddeed2a319bf9be87c21d3c82ef99ce2262c1fa0b6c859bba337d0f33f3422d8ecf1e222f8a942aded07992c89b6eb622d455417e2afc9c46e616143d20f75c8abbbfde5b4e0c54e5a37e393e154561dc252ae112802a4a7d00b5f0ff04295db0c66b40be7f15fccf3561fce2f77028e94ab7a4f22e17bd3d391d334263e82f6b5ab2dc048e930d92538bf07a38fd422fb837486ba4c59cf80112b9c36464aa16d49848d62735a5ac7dc40c7afa495eca69df95f342510708709ef3abf423386bb9518625023e4ae9591ac92a2960fee24a8a64aaf26239bf83906c2f25aacf463662a6fc5c1d26126f55a710b748fbb0efcd3d94d25a4cd67ce0a2f78f60ec37b57f6bd3f0090286dcc979de2f326368f9e3774577c5648b969761ebf3eab9a2722a91ca8bee95bd96fcde6fd476306f240ebafc537e12a15bd15faf882201198f35d22e8c442c0a24d7c5e703aeccda8e435193debb32e5e8d8fb08f45d5a5659cc8d6d50ab5f63a7346f39b2f22b42f135fa3c3fa7c7514d37253037046d598baf49df931d8dc4f35cdd237774a8220c35da3c208a41c3e8b56b9f986f4166a021a2b278ec85b5971c5c17a14f5f47372fb6e8620658dd267772f197df8edb263ec87095b02d41840266bb80ec330af43de082a1bcfd39bba36ac6a3a139ce5855a2efc929146fb9561c12682d7f648695bd2336e3494cc1b6955cedf883abb098a4acf22a89f16248e301a205fab2fa20011c748b5210099fb370294aeafcf77e9f7c3a6ed7bb3e9c841017325913345ec76b2ff96fa6eb72943637617438ac343f452d9d6b95b370b3a42816343e2f1e26825da43f1378fe7af64a8ead07b00770efe1ea3ed670f73513f5140b41c1224e96dd9e5fbdf81a0a6b28c3a87de52478ac5772b984cb469479bb53538352b2a8694db22389aa83dcc1f981c7dadda31119544a28c6dcc3977caa0b557b217cce50151efb1c38a98e33617a2291d9c06838e68bf64c6c89d20b3e322b7bc2c3b811d</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="note" scheme="https://sbcoder.cn/categories/note/"/>
    
    
      <category term="笔记" scheme="https://sbcoder.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计划" scheme="https://sbcoder.cn/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Aria2 + Rclone + Goindex 实现离线下载在线观看</title>
    <link href="https://sbcoder.cn/2020/01/22/aria_goindex.html"/>
    <id>https://sbcoder.cn/2020/01/22/aria_goindex.html</id>
    <published>2020-01-21T23:32:33.000Z</published>
    <updated>2020-01-23T00:48:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>云阀 5R NAT小鸡 </li><li>Google Drive 账号一枚</li><li>CloudFlare 账号</li></ul><p><strong><em>关于云阀的小鸡，性价比高，只提供ipv6和ipv4端口，因此下面的教程可能某些地方做了多余的动作，例如修改端口号等</em></strong></p><h2 id="安装Aria2一键脚本"><a href="#安装Aria2一键脚本" class="headerlink" title="安装Aria2一键脚本"></a>安装Aria2一键脚本</h2><p>执行下面的命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N git.io/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; ./aria2.sh</span><br></pre></td></tr></table></figure></p><p>进入下载脚本的目录运行脚本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">./aria2.sh</span><br><span class="line"></span><br><span class="line">Aria2 一键安装管理脚本 [vX.X.X]</span><br><span class="line">-- P3TERX.COM --</span><br><span class="line"></span><br><span class="line">1. 升级脚本</span><br><span class="line">————————————</span><br><span class="line">1. 安装 Aria2</span><br><span class="line">2. 更新 Aria2</span><br><span class="line">3. 卸载 Aria2</span><br><span class="line">————————————</span><br><span class="line">4. 启动 Aria2</span><br><span class="line">5. 停止 Aria2</span><br><span class="line">6. 重启 Aria2</span><br><span class="line">————————————</span><br><span class="line">7. 修改 配置</span><br><span class="line">8. 查看 配置</span><br><span class="line">9. 查看 日志</span><br><span class="line">10. 清空 日志</span><br><span class="line">————————————</span><br><span class="line">11. 手动更新 BT-Tracker</span><br><span class="line">12. 自动更新 BT-Tracker</span><br><span class="line">————————————</span><br><span class="line"></span><br><span class="line">当前状态: 已安装 并 已启动</span><br><span class="line"></span><br><span class="line">请输入数字 [0-12]:</span><br></pre></td></tr></table></figure></p><p>输入 1 回车<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2020/01/20/1PDwZQ.png" alt="1.png" title>                </div>                <div class="image-caption">1.png</div>            </figure><br>等待安装完成 再执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./aria2.sh</span><br></pre></td></tr></table></figure></p><p>输入 7 回车<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2020/01/20/1PDBIs.png" alt="2.png" title>                </div>                <div class="image-caption">2.png</div>            </figure></p><p>如需要可修改 RPC 密码，也建议修改</p><h2 id="安装-LNMP-一键安装包-Nginx"><a href="#安装-LNMP-一键安装包-Nginx" class="headerlink" title="安装 LNMP 一键安装包 / Nginx"></a>安装 LNMP 一键安装包 / Nginx</h2><p>我这里安装LNMP，其实只需要 Nginx就行了<br>安装教程参考 <a href="https://lnmp.org/install.html" target="_blank" rel="noopener">安装 - LNMP一键安装包</a></p><p>或者 直接执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://soft.vpser.net/lnmp/lnmp1.6.tar.gz -cO lnmp1.6.tar.gz &amp;&amp; tar zxf lnmp1.6.tar.gz &amp;&amp; cd lnmp1.6 &amp;&amp; ./install.sh lnmp</span><br></pre></td></tr></table></figure></p><p>我这里安装的是 1.6 ，可自行修改版本号</p><h2 id="安装-Aria2NG-界面管理"><a href="#安装-Aria2NG-界面管理" class="headerlink" title="安装 Aria2NG 界面管理"></a>安装 Aria2NG 界面管理</h2><p>打开地址 <a href="https://github.com/mayswind/AriaNg/releases" target="_blank" rel="noopener">Releases · mayswind/AriaNg</a><br>选择最新版本下载到 网站 目录下，如果不知道网站目录配置，建议存放在 LNMP的默认目录 /home/wwwroot/</p><p>按照如下操作<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/wwwroot/X</span><br><span class="line">cd /home/wwwroot/X</span><br><span class="line">wget https://github.com/mayswind/AriaNg/releases/download/1.1.4/AriaNg-1.1.4.zip</span><br><span class="line">unzip AriaNg-1.1.4.zip</span><br><span class="line">rm AriaNg-1.1.4.zip</span><br></pre></td></tr></table></figure></p><p>配置 Nginx<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf/vhost/</span><br><span class="line">vi X.conf</span><br></pre></td></tr></table></figure></p><p>输入以下配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 10002 default_server reuseport;</span><br><span class="line">        #listen [::]:80 default_server ipv6only=on;</span><br><span class="line">        server_name _;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root  /home/wwwroot/x;</span><br><span class="line"></span><br><span class="line">        #error_page   404   /404.html;</span><br><span class="line"></span><br><span class="line">        # Deny access to PHP files in specific directory</span><br><span class="line">        #location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ &#123; deny all; &#125;</span><br><span class="line"></span><br><span class="line">        include enable-php.conf;</span><br><span class="line"></span><br><span class="line">        location /nginx_status</span><br><span class="line">        &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log   off;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      12h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /.well-known &#123;</span><br><span class="line">            allow all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\.</span><br><span class="line">        &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        access_log  /home/wwwlogs/access.log;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>主要就是把端口改为 10002，其他的就是lnmp默认配置不动</p><p>配置完毕后，打开 网址 <a href="http://virt-nat-eu-1.cloudraft.cn:1XXX5" target="_blank" rel="noopener">http://virt-nat-eu-1.cloudraft.cn:1XXX5</a><br>将XX替换成你的 内网IP最后一位 例如 2 则访问 <a href="http://virt-nat-eu-1.cloudraft.cn:10025" target="_blank" rel="noopener">http://virt-nat-eu-1.cloudraft.cn:10025</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2020/01/20/1PyZ2q.png" alt="3.png" title>                </div>                <div class="image-caption">3.png</div>            </figure><p>点击 Aria2NG配置 - RPC(XXXX)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2020/01/20/1Py7zq.png" alt="4.png" title>                </div>                <div class="image-caption">4.png</div>            </figure><p>修改 RPC 别名 RPC 地址 RPC 秘钥<br>其他不动，按图填写即可</p><h2 id="免费申请一个Google无限团队盘"><a href="#免费申请一个Google无限团队盘" class="headerlink" title="免费申请一个Google无限团队盘"></a>免费申请一个Google无限团队盘</h2><p>打开地址 <a href="https://tv.ssr.workers.dev/" target="_blank" rel="noopener">创建Google TeamDrive</a><br>Gmail必须填写正确！</p><p>等待创建即可！</p><h2 id="安装Rclone"><a href="#安装Rclone" class="headerlink" title="安装Rclone"></a>安装Rclone</h2><p>执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://rclone.org/install.sh | sudo bash</span><br><span class="line">rclone config</span><br></pre></td></tr></table></figure></p><p>配置说明如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; n  # 选择n，新建</span><br><span class="line">name&gt; Google  # 输入名称，类似于标签，用于区分不同的网盘。</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / A stackable unification remote, which can appear to merge the contents of several remotes</span><br><span class="line">   \ &quot;union&quot;</span><br><span class="line"> 2 / Alias for a existing remote</span><br><span class="line">   \ &quot;alias&quot;</span><br><span class="line"> 3 / Amazon Drive</span><br><span class="line">   \ &quot;amazon cloud drive&quot;</span><br><span class="line"> 4 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio)</span><br><span class="line">   \ &quot;s3&quot;</span><br><span class="line"> 5 / Backblaze B2</span><br><span class="line">   \ &quot;b2&quot;</span><br><span class="line"> 6 / Box</span><br><span class="line">   \ &quot;box&quot;</span><br><span class="line"> 7 / Cache a remote</span><br><span class="line">   \ &quot;cache&quot;</span><br><span class="line"> 8 / Dropbox</span><br><span class="line">   \ &quot;dropbox&quot;</span><br><span class="line"> 9 / Encrypt/Decrypt a remote</span><br><span class="line">   \ &quot;crypt&quot;</span><br><span class="line">10 / FTP Connection</span><br><span class="line">   \ &quot;ftp&quot;</span><br><span class="line">11 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ &quot;google cloud storage&quot;</span><br><span class="line">12 / Google Drive</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line">13 / Hubic</span><br><span class="line">   \ &quot;hubic&quot;</span><br><span class="line">14 / JottaCloud</span><br><span class="line">   \ &quot;jottacloud&quot;</span><br><span class="line">15 / Local Disk</span><br><span class="line">   \ &quot;local&quot;</span><br><span class="line">16 / Mega</span><br><span class="line">   \ &quot;mega&quot;</span><br><span class="line">17 / Microsoft Azure Blob Storage</span><br><span class="line">   \ &quot;azureblob&quot;</span><br><span class="line">18 / Microsoft OneDrive</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line">19 / OpenDrive</span><br><span class="line">   \ &quot;opendrive&quot;</span><br><span class="line">20 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ &quot;swift&quot;</span><br><span class="line">21 / Pcloud</span><br><span class="line">   \ &quot;pcloud&quot;</span><br><span class="line">22 / QingCloud Object Storage</span><br><span class="line">   \ &quot;qingstor&quot;</span><br><span class="line">23 / SSH/SFTP Connection</span><br><span class="line">   \ &quot;sftp&quot;</span><br><span class="line">24 / Webdav</span><br><span class="line">   \ &quot;webdav&quot;</span><br><span class="line">25 / Yandex Disk</span><br><span class="line">   \ &quot;yandex&quot;</span><br><span class="line">26 / http Connection</span><br><span class="line">   \ &quot;http&quot;</span><br><span class="line">Storage&gt; 12  # 选择12，Google Drive</span><br><span class="line">** See help for drive backend at: https://rclone.org/drive/ **</span><br><span class="line"></span><br><span class="line">Google Application Client Id</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_id&gt;  # 留空，回车</span><br><span class="line">Google Application Client Secret</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_secret&gt;  # 留空，回车</span><br><span class="line">Scope that rclone should use when requesting access from drive.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / Full access all files, excluding Application Data Folder.</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line"> 2 / Read-only access to file metadata and file contents.</span><br><span class="line">   \ &quot;drive.readonly&quot;</span><br><span class="line">   / Access to files created by rclone only.</span><br><span class="line"> 3 | These are visible in the drive website.</span><br><span class="line">   | File authorization is revoked when the user deauthorizes the app.</span><br><span class="line">   \ &quot;drive.file&quot;</span><br><span class="line">   / Allows read and write access to the Application Data folder.</span><br><span class="line"> 4 | This is not visible in the drive website.</span><br><span class="line">   \ &quot;drive.appfolder&quot;</span><br><span class="line">   / Allows read-only access to file metadata but</span><br><span class="line"> 5 | does not allow any access to read or download file content.</span><br><span class="line">   \ &quot;drive.metadata.readonly&quot;</span><br><span class="line">scope&gt; 1</span><br><span class="line">ID of the root folder</span><br><span class="line">Leave blank normally.</span><br><span class="line">Fill in to access &quot;Computers&quot; folders. (see docs).</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">root_folder_id&gt;  # 留空，回车</span><br><span class="line">Service Account Credentials JSON file path</span><br><span class="line">Leave blank normally.</span><br><span class="line">Needed only if you want use SA instead of interactive login.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">service_account_file&gt;</span><br><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n</span><br><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y if not sure</span><br><span class="line"> * Say N if you are working on a remote or headless machine or Y didn&apos;t work</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n</span><br><span class="line">If your browser doesn&apos;t open automatically go to the following link: https://accounts.google.com/o/oauth2/auth?access_type=offline&amp;client_id=XXXXXXXXXXX.apps.googleusercontent.com&amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;response_type=code&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&amp;state=XXXXXXXXXXXXXXXXXXXX</span><br><span class="line">Log in and authorize rclone for access  # 会弹出浏览器，要求你登录账号进行授权。如果没有弹出，复制上面的链接到浏览器中打开进行授权。</span><br><span class="line">Enter verification code&gt;  # 在这里输入网页上显示的验证码</span><br><span class="line"></span><br><span class="line">Configure this as a team drive?</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; y</span><br><span class="line">Fetching team drive list...</span><br><span class="line">No team drives found in your account--------------------</span><br><span class="line">[Google]</span><br><span class="line">type = drive</span><br><span class="line">scope = drive</span><br><span class="line">token = &#123;&quot;access_token&quot;:&quot;XXXXXXXXXXXXXXXXXXXXX&quot;&#125;</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; y</span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">Google               drive</span><br><span class="line">One                  onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; q</span><br></pre></td></tr></table></figure></p><p>参考:<a href="https://p3terx.com/archives/rclone-installation-and-configuration-tutorial.html" target="_blank" rel="noopener">P3TERX - Rclone 安装配置教程 - 连接 OneDrive 和 Google Drive</a></p><h2 id="配置-Aira2-自动上传"><a href="#配置-Aira2-自动上传" class="headerlink" title="配置 Aira2 自动上传"></a>配置 Aira2 自动上传</h2><p>执行 按图修改<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /root/.aria2/autoupload.sh</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2020/01/20/1Pczx1.png" alt="5.png" title>                </div>                <div class="image-caption">5.png</div>            </figure><p>执行 按图修改<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /root/.aria2/aria2.conf</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2020/01/20/1PgbQI.png" alt="6.png" title>                </div>                <div class="image-caption">6.png</div>            </figure><p>重启 Aria2<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service aria2 restart</span><br></pre></td></tr></table></figure></p><h2 id="使用Goindex-CloudFlare搞一个在线观看"><a href="#使用Goindex-CloudFlare搞一个在线观看" class="headerlink" title="使用Goindex + CloudFlare搞一个在线观看"></a>使用Goindex + CloudFlare搞一个在线观看</h2><p>官方说明 <a href="https://github.com/donwa/goindex" target="_blank" rel="noopener">donwa/Github</a></p><p>复制 <a href="https://github.com/donwa/goindex/blob/master/index.js" target="_blank" rel="noopener">index.js</a> 里面的代码</p><p>打开 CloudFlare ，创建Workers</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2020/01/20/1PLmSP.png" alt="7.png" title>                </div>                <div class="image-caption">7.png</div>            </figure><p>将上面复制的内容黏贴到Script中</p><p>执行 并 查看 rclone.conf 路径。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone config file</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2020/01/20/1Pq5R0.png" alt="8.png" title>                </div>                <div class="image-caption">8.png</div>            </figure><p>复制 root_folder_id 和 refresh_token 的值填入 CloudFlare Workers Script对应的代码位置里面<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2020/01/20/1PLotA.png" alt="9.png" title>                </div>                <div class="image-caption">9.png</div>            </figure></p><p>配置好后点击保存，然后打开CloudFlare Workers提供的域名即可看到对应的网盘内容</p><p>作者博客 <a href="https://sbcoder.cn">风向标博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;云阀 5R NAT小鸡 &lt;/li&gt;
&lt;li&gt;Google Drive 账号一枚&lt;/li&gt;
&lt;li&gt;CloudFl
      
    
    </summary>
    
      <category term="折腾" scheme="https://sbcoder.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="离线下载" scheme="https://sbcoder.cn/tags/%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="Google" scheme="https://sbcoder.cn/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>Canal 根据 binlog日志数据同步</title>
    <link href="https://sbcoder.cn/2020/01/22/canal_go.html"/>
    <id>https://sbcoder.cn/2020/01/22/canal_go.html</id>
    <published>2020-01-21T23:32:09.000Z</published>
    <updated>2020-01-21T23:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建mysql账户"><a href="#创建mysql账户" class="headerlink" title="创建mysql账户"></a>创建mysql账户</h2><p>如果使用的是root用户，则不需要操作这个步骤</p><p>grant all privileges on  <em>.</em> to  ‘jcc’@’%’ identified by ‘jcc’;<br>flush privileges;</p><h2 id="配置mysql-参见canal-Quickstart"><a href="#配置mysql-参见canal-Quickstart" class="headerlink" title="配置mysql (参见canal　Quickstart)"></a>配置mysql (参见canal　Quickstart)</h2><p>启用binlog日志<br>打开 mysql.cnf 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld] </span><br><span class="line">log-bin=mysql-bin </span><br><span class="line">binlog-format=ROW #选择row模式 </span><br><span class="line">server_id=9527 #配置mysql replaction需要定义，不能和canal的slaveId重复</span><br></pre></td></tr></table></figure></p><h2 id="添加slave权限"><a href="#添加slave权限" class="headerlink" title="添加slave权限"></a>添加slave权限</h2><p>如果使用的是root用户，则不需要操作这个步骤<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> canal <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'canal'</span>;  </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">SHOW</span> <span class="keyword">VIEW</span>, <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span>, <span class="keyword">REPLICATION</span> <span class="keyword">CLIENT</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'canal'</span>@<span class="string">'%'</span>;<span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p><h2 id="创建canal-server-服务端"><a href="#创建canal-server-服务端" class="headerlink" title="创建canal server 服务端"></a>创建canal server 服务端</h2><p>需要提前安装好Docker，如果不会安装，可以参考我之前写的文章 <a href="https://sbcoder.cn/2019/12/10/gogs_docker.html#CentOS7-%E5%AE%89%E8%A3%85-Docker">CentOS7 安装 Docker</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 11111:11111 -e canal.auto.scan=false -e canal.instance.master.address=127.0.0.1:3306 -e canal.instance.dbUsername=test -e canal.instance.dbPassword=test -e canal.instance.connectionCharset=UTF-8 -e canal.instance.tsdb.enable=true -e canal.instance.gtidon=false -e canal.instance.filter.regex=.*\\..* -e canal.destinations=test  -d canal/canal-server</span><br></pre></td></tr></table></figure><p>需要替换以下参数</p><ul><li>canal.instance.master.address=127.0.0.1:3306  地址ip更换（尽量用内网）  </li><li>canal.instance.dbUsername=test     数据库账户  </li><li>canal.instance.dbPassword=test      数据库密码</li><li>canal.destinations=test          test为名称 可以修改</li><li>11111:11111       服务器端口：docker端口</li></ul><p>需要注意的是，所填写的数据库账户必须拥有数据库的操作权限，如果不知道权限如何配置，则建议直接使用root用户</p><h2 id="canal-客户端"><a href="#canal-客户端" class="headerlink" title="canal 客户端"></a>canal 客户端</h2><p>我们这里使用Go客户端，因为Go语言的特性，可以很好的运行在Docker上</p><p>canal-go 文档: <a href="https://github.com/withlin/canal-go" target="_blank" rel="noopener">withlin/canal-go</a></p><p>开发过程可以参照文档</p><h2 id="Docker启动canal客户端"><a href="#Docker启动canal客户端" class="headerlink" title="Docker启动canal客户端"></a>Docker启动canal客户端</h2><p>推荐使用Jenkins配置 canal-go<br>构建成功后执行shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t canal_prod:v1 $&#123;WORKSPACE&#125;</span><br><span class="line">docker service update --image canal_prod:v1 --force --no-resolve-image canal_prod</span><br></pre></td></tr></table></figure><p>如果看过我之前的 代码架构文章，可以在Portainer中看到打印在控制台的文字，也可以看到运行状态</p><h2 id="FAQ问题解决"><a href="#FAQ问题解决" class="headerlink" title="FAQ问题解决"></a>FAQ问题解决</h2><p>Q:如果服务停止了，如何解决<br>A:链接到canal-server的Docker内部，查看 canal-server - logs 中的日志</p><p>Q:如果数据同步失败了如何解决<br>A:很大可能是由于改变了数据库结构导致的，需要重启客户端和服务端尝试</p><p>Q:一开始数据就不同步<br>A:查看你的数据库账户是否有权限，如无权限则修改服务端启动时附带的数据库账户参数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建mysql账户&quot;&gt;&lt;a href=&quot;#创建mysql账户&quot; class=&quot;headerlink&quot; title=&quot;创建mysql账户&quot;&gt;&lt;/a&gt;创建mysql账户&lt;/h2&gt;&lt;p&gt;如果使用的是root用户，则不需要操作这个步骤&lt;/p&gt;
&lt;p&gt;grant all p
      
    
    </summary>
    
      <category term="优化" scheme="https://sbcoder.cn/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="数据库" scheme="https://sbcoder.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="优化" scheme="https://sbcoder.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP使用RabbitMQ进行数据解耦 从安装到监听完全版</title>
    <link href="https://sbcoder.cn/2020/01/07/rabbitmq_thinkphp.html"/>
    <id>https://sbcoder.cn/2020/01/07/rabbitmq_thinkphp.html</id>
    <published>2020-01-07T15:32:40.000Z</published>
    <updated>2020-01-07T15:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>分布式部署，RabbitMQ(简称MQ)作为消息中间件是一个非常不错的选择，可以实现异步互不干扰的解耦操作。</p><h2 id="解决需求"><a href="#解决需求" class="headerlink" title="解决需求"></a>解决需求</h2><p>当有两套系统分别部署时，需要同步一部分数据，或者需要互不干扰解决异步独立运行时，可以使用RebbitMQ来给两套系统解耦，使用RebbitMQ作为中间件，只做消息传输使用，当系统A宕机或者因故障无法使用时，不会影响到系统B的正常运行！</p><h2 id="部署MQ"><a href="#部署MQ" class="headerlink" title="部署MQ"></a>部署MQ</h2><p>使用Docker部署，安装Docker可以参照之前写的 <a href="https://sbcoder.cn/2019/12/10/gogs_docker.html#CentOS7-%E5%AE%89%E8%A3%85-Docker">CentOS7 安装 Docker</a>，或者<a href="https://sbcoder.cn/2019/12/09/code_build.html#Ubuntu16-04-Ubuntu18-04-%E5%AE%89%E8%A3%85-Docker">Ubuntu16.04/Ubuntu18.04 安装 Docker</a>。</p><p>下载镜像<br>镜像地址 <a href="https://registry.hub.docker.com/_/rabbitmq/" target="_blank" rel="noopener">rabbitmq</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/T9r4zdpChFlJ85A.png" alt="1.png" title>                </div>                <div class="image-caption">1.png</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建容器并运行</span><br><span class="line">docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management</span><br><span class="line"># 查看 当前运行的容器</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/vyqx8KmEa2RWSD5.png" alt="2.png" title>                </div>                <div class="image-caption">2.png</div>            </figure><h2 id="配置MQ"><a href="#配置MQ" class="headerlink" title="配置MQ"></a>配置MQ</h2><h3 id="安装MQ"><a href="#安装MQ" class="headerlink" title="安装MQ"></a>安装MQ</h3><p>打开 <a href="http://localhost:15672" target="_blank" rel="noopener">http://IP:15672</a><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/W1BTxs8krceSZqV.png" alt="3.png" title>                </div>                <div class="image-caption">3.png</div>            </figure><br>使用默认用户名密码登录<br>username:guest password:guest<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/fDuaX6cMbiSpFI5.png" alt="4.png" title>                </div>                <div class="image-caption">4.png</div>            </figure><br>红框内为你的rabbitmq版本号，我这里是3.8.2</p><p>创建一个管理员用户<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/LUnvRskT2ocyHh6.png" alt="5.png" title>                </div>                <div class="image-caption">5.png</div>            </figure></p><p>修改guest的密码，请将123456修改为你需要修改的密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it rabbitmq /bin/bash</span><br><span class="line">rabbitmqctl  list_users</span><br><span class="line">rabbitmqctl  change_password  guest  &apos;123456&apos;</span><br></pre></td></tr></table></figure></p><p>修改guest默认密码以防止被人恶意利用<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/EL7dul54znYxeGA.png" alt="6.png" title>                </div>                <div class="image-caption">6.png</div>            </figure></p><h3 id="创建队列及交换机"><a href="#创建队列及交换机" class="headerlink" title="创建队列及交换机"></a>创建队列及交换机</h3><p>创建队列可以在mq页端创建也可以在代码中自动创建，我这里直接在页端创建<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2020/01/07/l6CsBV.png" alt="创建Queen" title>                </div>                <div class="image-caption">创建Queen</div>            </figure></p><p>创建交换机，也在页端创建好<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2020/01/07/l6CBXq.png" alt="创建Exchange" title>                </div>                <div class="image-caption">创建Exchange</div>            </figure></p><h2 id="ThinkPHP实现过程"><a href="#ThinkPHP实现过程" class="headerlink" title="ThinkPHP实现过程"></a>ThinkPHP实现过程</h2><h3 id="Composer安装php-amqplib"><a href="#Composer安装php-amqplib" class="headerlink" title="Composer安装php-amqplib"></a>Composer安装php-amqplib</h3><p>略</p><h3 id="生产者实现"><a href="#生产者实现" class="headerlink" title="生产者实现"></a>生产者实现</h3><ul><li>创建一个生产者类放置于 common 目录下，方便调用</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RabbitMq</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $connection;</span><br><span class="line">    <span class="keyword">protected</span> $channel;</span><br><span class="line">    <span class="comment">//protected $exchange = 'router';  //</span></span><br><span class="line">    <span class="comment">//protected $queue = 'msgs';</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;connection = <span class="keyword">new</span> AMQPStreamConnection(config(<span class="string">'rabbit_mq.host'</span>), config(<span class="string">'rabbit_mq.port'</span>), config(<span class="string">'rabbit_mq.user'</span>), config(<span class="string">'rabbit_mq.password'</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;channel = <span class="keyword">$this</span>-&gt;connection-&gt;channel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 向队列发送信息（生产者）</span></span><br><span class="line"><span class="comment">     * $data 向队列发送参数</span></span><br><span class="line"><span class="comment">     * $code   路由名</span></span><br><span class="line"><span class="comment">     * $queue  主题</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($data,$exchange,$routing_key=<span class="string">'order'</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">//        $this-&gt;channel-&gt;queue_declare($this-&gt;queue, false, true, false, false);</span></span><br><span class="line"><span class="comment">//        $this-&gt;channel-&gt;exchange_declare($this-&gt;exchange, AMQPExchangeType::DIRECT, false, true, false);</span></span><br><span class="line"><span class="comment">//        $this-&gt;channel-&gt;queue_bind($this-&gt;queue, $this-&gt;exchange);</span></span><br><span class="line"></span><br><span class="line">        $messageBody = json_encode($data);<span class="comment">//将要发送数据变为json字符串</span></span><br><span class="line"></span><br><span class="line">        $message = <span class="keyword">new</span> AMQPMessage($messageBody, <span class="keyword">array</span>(<span class="string">'content_type'</span> =&gt; <span class="string">'text/plain'</span>, <span class="string">'delivery_mode'</span> =&gt; AMQPMessage::DELIVERY_MODE_PERSISTENT));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;channel-&gt;basic_publish($message,$exchange,$routing_key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;stop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭进程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;channel-&gt;close();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;connection-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现过程如下</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RabbitMq</span> <span class="keyword">extends</span> <span class="title">controller</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $rabbitMq;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Unit constructor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Request $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \think\db\exception\DataNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \think\db\exception\ModelNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \think\exception\DbException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;rabbitMq                = <span class="keyword">new</span> \app\common\RabbitMq();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \think\db\exception\DataNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \think\db\exception\ModelNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \think\exception\DbException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $params = <span class="keyword">$this</span>-&gt;request-&gt;param();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;rabbitMq-&gt;send($params,<span class="string">'testMq'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者实现"><a href="#消费者实现" class="headerlink" title="消费者实现"></a>消费者实现</h3><ul><li><p>创建一个RabbitMq类,方便之后调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RabbitMq</span> <span class="keyword">extends</span> <span class="title">controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $connection;</span><br><span class="line">    <span class="keyword">protected</span> $channel;</span><br><span class="line">    <span class="keyword">protected</span> $exchange;  <span class="comment">//</span></span><br><span class="line">    <span class="keyword">protected</span> $queue;</span><br><span class="line">    <span class="keyword">protected</span> $vhost;</span><br><span class="line">    <span class="keyword">protected</span> $consumerTag;</span><br><span class="line">    <span class="keyword">protected</span> $routeKey;</span><br><span class="line">    <span class="comment">// 此处使用配置文件配置，具体可自行配置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接RabbitMQ</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;queue       = Config::get(<span class="string">'database.RabbitMQ'</span>)[<span class="string">'queue'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;exchange    = Config::get(<span class="string">'database.RabbitMQ'</span>)[<span class="string">'exchange'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vhost       = Config::get(<span class="string">'database.RabbitMQ'</span>)[<span class="string">'vhost'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;consumerTag = <span class="string">'AgentOrder'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;routeKey    = <span class="string">'addOrderAndSub'</span>;</span><br><span class="line"></span><br><span class="line">        $host             = Config::get(<span class="string">'database.RabbitMQ'</span>)[<span class="string">'host'</span>];</span><br><span class="line">        $port             = Config::get(<span class="string">'database.RabbitMQ'</span>)[<span class="string">'port'</span>];</span><br><span class="line">        $username         = Config::get(<span class="string">'database.RabbitMQ'</span>)[<span class="string">'username'</span>];</span><br><span class="line">        $password         = Config::get(<span class="string">'database.RabbitMQ'</span>)[<span class="string">'password'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;connection = <span class="keyword">new</span> AMQPStreamConnection($host, $port, $username, $password);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;channel    = <span class="keyword">$this</span>-&gt;connection-&gt;channel();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;logMqWright(<span class="string">'MQ已连接'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMessage</span><span class="params">($callback)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 队列声明，创建队列，如果不存在则自动创建，如已创建则不需要使用</span></span><br><span class="line">        <span class="comment">// $this-&gt;channel-&gt;queue_declare($this-&gt;queue, false, true, false, false);</span></span><br><span class="line">        <span class="comment">// 绑定交换机</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;channel-&gt;exchange_declare(<span class="keyword">$this</span>-&gt;exchange, <span class="string">'direct'</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;logMqWright(<span class="string">'---MQ交换机绑定完成---'</span>);</span><br><span class="line">        <span class="comment">// 绑定队列</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;channel-&gt;queue_bind(<span class="keyword">$this</span>-&gt;queue, <span class="keyword">$this</span>-&gt;exchange, <span class="keyword">$this</span>-&gt;routeKey);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;logMqWright(<span class="string">'---MQ队列绑定完成---'</span>);</span><br><span class="line">        <span class="comment">// 信息消费，no_ack 为true时为自动应答</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;channel-&gt;basic_consume(<span class="keyword">$this</span>-&gt;queue, <span class="keyword">$this</span>-&gt;consumerTag, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count(<span class="keyword">$this</span>-&gt;channel-&gt;callbacks)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;logMqWright(<span class="string">'---MQ执行次数统计['</span> . $i . <span class="string">']---'</span>);</span><br><span class="line">            $i++;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;channel-&gt;wait();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 日志写入函数 目录/runtime/agent_log/当前年月/当前日期MQ.txt</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">logMqWright</span><span class="params">($msg)</span> </span>&#123;</span><br><span class="line">        $val             = <span class="string">""</span>;</span><br><span class="line">        $currentDateTime = date(<span class="string">'Y-m-d H:i:s'</span>, time());</span><br><span class="line">        $currentDate     = date(<span class="string">'Ymd'</span>, time());</span><br><span class="line">        $fileDir         = <span class="keyword">__DIR__</span> . <span class="string">'/../../runtime/'</span> . <span class="string">'agentlog/'</span> . date(<span class="string">'Ym'</span>, time());</span><br><span class="line">        <span class="keyword">if</span> (!file_exists($fileDir)) &#123;</span><br><span class="line">            mkdir($fileDir, <span class="number">0777</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $fileName = $fileDir . <span class="string">'/'</span> . $currentDate . <span class="string">"MQ.txt"</span>;<span class="comment">//文件名称</span></span><br><span class="line">        $data     = fopen($fileName, <span class="string">'a+'</span>);<span class="comment">//添加不覆盖，首先会判断这个文件是否存在，如果不存在，则会创建该文件，即每天都会创建一个新的文件记录的信息</span></span><br><span class="line">        $val      = <span class="string">'['</span> . $currentDateTime . <span class="string">']:'</span> . $msg;</span><br><span class="line">        $val      .= <span class="string">"\n"</span>;</span><br><span class="line">        fwrite($data, $val);<span class="comment">//写入文本中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭进程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;channel-&gt;close();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;connection-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者消费过程</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CLI接口,需要开启守护进程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">catch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接RabbitMQ</span></span><br><span class="line">        $RabbitMq = <span class="keyword">new</span> \app\common\RabbitMq();<span class="comment">//队列</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;logAgentWrite(<span class="string">'------------------MQ链接成功 开始整理MQ消息------------------'</span>);</span><br><span class="line">        $callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $msg;</span><br><span class="line">        <span class="comment">// msg为队列内的信息流，在此处填写消费过程即可</span></span><br><span class="line">        &#125;;</span><br><span class="line">        $RabbitMq-&gt;getMessage($callback);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者创建监听接口，用于守护进程调用</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MqService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">mqAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;catch(); <span class="comment">// 调用上面的catch函数，自行修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此所需要的代码就完成了</p><h2 id="消费者脚本"><a href="#消费者脚本" class="headerlink" title="消费者脚本"></a>消费者脚本</h2><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p>tips:只适用于Linux</p><p>我们在使用PHP作为消费者时，一般是使用PHP直接执行文件，使用nohup守护进程调用，但是当系统不稳定时，可能会出现各种问题导致mq队列失效，这时候就需要使用脚本监听，如果守护进程不存在，则自动重启守护进程</p><p>首先测试时可以先执行守护进程命令，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /usr/bin/php7.2 /alidata/workspace/test/public/index.php /api_comm/mq_service/mqAction &amp;</span><br></pre></td></tr></table></figure></p><p>路径请自行修改</p><h3 id="监听信息"><a href="#监听信息" class="headerlink" title="监听信息"></a>监听信息</h3><p>编写Shell如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line">file_name="/root/restartMqService.log"  #重启脚本的日志，保证可写入，保险一点执行 chmod 777 restartMqService.log</span><br><span class="line">pid=0</span><br><span class="line">proc_num() </span><br><span class="line">&#123;</span><br><span class="line">    num=`ps -ef | grep '/usr/bin/php7.2 /alidata/workspace/test/public/index.php /api_comm/mq_service/mqAction' | grep -v grep | wc -l`  #此处'nohup /usr/bin/php7.2 /alidata/workspace/test/public/index.php /api_comm/mq_service/mqAction &amp;'替代为实际的，尽量准确，避免误kill</span><br><span class="line">    return $num </span><br><span class="line">&#125;</span><br><span class="line">proc_id()</span><br><span class="line">&#123;  </span><br><span class="line">    pid=`ps -ef | grep '/usr/bin/php7.2 /alidata/workspace/test/public/index.php /api_comm/mq_service/mqAction' | grep -v grep | awk '&#123;print $2&#125;'`  #此处'nohup /usr/bin/php7.2 /alidata/workspace/test/public/index.php /api_comm/mq_service/mqAction &amp;'也替代为实际的</span><br><span class="line">&#125; </span><br><span class="line">proc_num  #执行proc_num()，获取进程数</span><br><span class="line">number=$?  #获取上一函数返回值</span><br><span class="line">if [ $number -eq 0 ]  #如果没有该进程，则重启</span><br><span class="line">then</span><br><span class="line">    nohup /usr/bin/php7.2 /alidata/workspace/test/public/index.php /api_comm/mq_service/mqAction &amp;  #启动程序的命令</span><br><span class="line">    proc_id </span><br><span class="line">    echo $&#123;pid&#125;, `date` &gt;&gt; $file_name  #把重启的进程号、时间 写入日志</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>将该脚本重命名为 mqMonitor.sh</p><h3 id="配置Crontab"><a href="#配置Crontab" class="headerlink" title="配置Crontab"></a>配置Crontab</h3><p>在crontab配置文件下加上一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/2 * * * * sh /root/mqMonitor.sh</span><br></pre></td></tr></table></figure></p><p>保存后重启生效，大致是2分钟监测一次，可自行修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;分布式部署，RabbitMQ(简称MQ)作为消息中间件是一个非常不错的选择，可以实现异步互不干扰的解耦操作。&lt;/p&gt;
&lt;h2 id=&quot;解决需
      
    
    </summary>
    
      <category term="优化" scheme="https://sbcoder.cn/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="优化" scheme="https://sbcoder.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="消息队列" scheme="https://sbcoder.cn/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="解耦" scheme="https://sbcoder.cn/tags/%E8%A7%A3%E8%80%A6/"/>
    
  </entry>
  
  <entry>
    <title>公司代码架构 - Docker + Jenkins + Gogs + Portainer(四)</title>
    <link href="https://sbcoder.cn/2019/12/14/docker_swarm.html"/>
    <id>https://sbcoder.cn/2019/12/14/docker_swarm.html</id>
    <published>2019-12-13T23:35:13.000Z</published>
    <updated>2019-12-18T12:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Portainer-Swarm-管理Docker集群"><a href="#Portainer-Swarm-管理Docker集群" class="headerlink" title="Portainer + Swarm 管理Docker集群"></a>Portainer + Swarm 管理Docker集群</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Portainer是一个Docker管理工具，它支持多种方式，我们这里只写，远程链接形式和本地形式</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li>服务器1     ：Virmach 水牛城 RAM1.8G 2C 10GSSD（黑五机器）</li><li>操作系统    ：Ubuntu16.04</li><li>部署环境    ：LNMP1.6 （我是军哥铁粉）</li></ul><p>服务器1：搭建Jenkins中转服务器，做代码自动构建使用<br>服务器2：生产环境服务器，实则测试服务器，部署代码使用<br>服务器3：Gogs服务器，Git版本库服务器，做代码版本控制使用</p><h2 id="配置Portainer"><a href="#配置Portainer" class="headerlink" title="配置Portainer"></a>配置Portainer</h2><h3 id="开放DockerAPI端口"><a href="#开放DockerAPI端口" class="headerlink" title="开放DockerAPI端口"></a>开放DockerAPI端口</h3><p>将需要加入Portainer管理的服务器（需要安装过Docker），打开2375端口，方便管理</p><p>创建一个备份，并编辑配置文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /lib/systemd/system/docker.service /lib/systemd/system/docker.service.bak </span><br><span class="line">vi /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure></p><p>方法一：<br>在ExecStart整行后面添加 -H tcp://0.0.0.0:2375，有的时候他可能不止一行，则在最后面增加这一段即可，如下<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/11/QsKW60.png" alt="2.png" title>                </div>                <div class="image-caption">2.png</div>            </figure><br>:wq 保存退出</p><p>方法二（推荐）：<br>本方法并不适用于所有的Docker版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></p><p>复制以下内容<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"hosts"</span>: [</span><br><span class="line">        <span class="string">"tcp://0.0.0.0:2375"</span>,</span><br><span class="line">        <span class="string">"unix:///var/run/docker.sock"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置完后重启Docker<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>这里推荐大家使用iptables防火墙限制一下2375端口的访问，如果将2375暴露在公网则可能出现一系列安全问题，如果是国内的腾讯或者阿里，则可以直接在后台配置安全组，安全组里限制 指定IP访问指定端口即可，如果将2375暴露在外，则可能受到黑客恶意攻击！</p><p>如果不是国内机器，也可以通过iptables限制访问<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -s 107.173.XXX.XXX -p tcp --dport 2375 -j ACCEPT</span><br><span class="line">systemctl iptables.service save</span><br><span class="line">systemctl restart iptables.service</span><br><span class="line"><span class="meta">#</span> systemctl stop iptables.service 如果配置有误可以停止iptables尝试</span><br></pre></td></tr></table></figure></p><p>非常不推荐直接将2375暴露在公网，秒被黑~</p><p>配置后的效果如下图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/12/QyJgud.png" alt="3.png" title>                </div>                <div class="image-caption">3.png</div>            </figure></p><h3 id="安装Portainer"><a href="#安装Portainer" class="headerlink" title="安装Portainer"></a>安装Portainer</h3><p>创建数据<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create portainer_data</span><br></pre></td></tr></table></figure></p><p>创建Portainer并运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure></p><p>执行后访问 <a href="http://ip:9000" target="_blank" rel="noopener">http://ip:9000</a>即可看到<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/11/Qsn7bF.png" alt="1.png" title>                </div>                <div class="image-caption">1.png</div>            </figure><br>刚创建完会提示创建一个管理员用户，按照提示创建即可</p><p>选择创建Docker时使用Remote，远程连接，按下图填写<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/12/QyYn2D.png" alt="4.png" title>                </div>                <div class="image-caption">4.png</div>            </figure></p><p>添加完成后如下图，点击访问创建好的节点则可以操作里面的内容<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/12/QyYDZn.png" alt="5.png" title>                </div>                <div class="image-caption">5.png</div>            </figure></p><h3 id="创建Swarm集群"><a href="#创建Swarm集群" class="headerlink" title="创建Swarm集群"></a>创建Swarm集群</h3><p>在管理节点上增加Swarm集群manager节点<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr [IP ADDRESS]</span><br><span class="line"><span class="meta">#</span> 例如 docker swarm init --advertise-addr 107.173.XXX.XXX</span><br></pre></td></tr></table></figure></p><p>返回结果如下，为了安全，关键位置已打码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Swarm initialized: current node (mjjrpuemaukx5a185iqd54mka) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-1zd********2oci43nbf1jjhlng8k********fhfzqw2-1ywv79qnvmlb*******h3gs35r 107.173.XXX.XXX:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions.</span><br></pre></td></tr></table></figure></p><p>当Manager节点增加完成后，可以在子节点中输入上面提示的命令以worker形式加入集群<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-1zd********2oci43nbf1jjhlng8k********fhfzqw2-1ywv79qnvmlb*******h3gs35r 107.173.XXX.XXX:2377</span><br></pre></td></tr></table></figure></p><p>子节点加入成功后可以在父节点中查看子节点信息<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node ls</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/12/QycbMn.png" alt="6.png" title>                </div>                <div class="image-caption">6.png</div>            </figure><p>如果在Portainer增加manager节点，则会自动出现 Swarm 和 Service选项，如图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/13/QcH3Tg.png" alt="7.png" title>                </div>                <div class="image-caption">7.png</div>            </figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本次搭建过程就基本完成了，我们可以通过Portainer管理之前搭建的一系列环境，至此，一套简单的公司架构就完成了，生产环境也可以做到实时构建，只需要在Gogs上面发布版本就可以了，选择手动构建，构建时选择版本号即可，这样做的好处是如果正式环境有bug时可以随时回滚到稳定版本，当然，发布版本也是建立在测试完后的场景！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Portainer-Swarm-管理Docker集群&quot;&gt;&lt;a href=&quot;#Portainer-Swarm-管理Docker集群&quot; class=&quot;headerlink&quot; title=&quot;Portainer + Swarm 管理Docker集群&quot;&gt;&lt;/a&gt;Portai
      
    
    </summary>
    
      <category term="架构" scheme="https://sbcoder.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="优化" scheme="https://sbcoder.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="架构" scheme="https://sbcoder.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="版本控制" scheme="https://sbcoder.cn/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>公司代码架构 - Docker + Jenkins + Gogs + Portainer(三)</title>
    <link href="https://sbcoder.cn/2019/12/11/jenkins_docker.html"/>
    <id>https://sbcoder.cn/2019/12/11/jenkins_docker.html</id>
    <published>2019-12-11T11:09:38.000Z</published>
    <updated>2019-12-11T11:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置Jenkins实现自动构建"><a href="#配置Jenkins实现自动构建" class="headerlink" title="配置Jenkins实现自动构建"></a>配置Jenkins实现自动构建</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>前面已经搭建好了基本环境，剩下的就是自动构建了，这里就需要使用我们的构建工具Jenkins，Jenkins是一个非常牛逼的东西，它可以实现代码同步构建，当你修改你的代码并传到git时，Jenkins可以自动将你的代码同步到服务器上面，当然这只是Jenkins的基本功能之一，他还有非常多的东西值得我们学习~</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li>服务器2     ：Pacificrack 洛杉矶 RAM2G 2C 35GSSD（圣诞机器）18刀</li><li>操作系统    ：CentOS7.5</li><li>部署环境    ：LNMP1.6 （我是军哥铁粉） + Java8</li></ul><p>服务器1：搭建Jenkins中转服务器，做代码自动构建使用<br>服务器2：生产环境服务器，实则测试服务器，部署代码使用<br>服务器3：Gogs服务器，Git版本库服务器，做代码版本控制使用</p><h2 id="生产环境搭建"><a href="#生产环境搭建" class="headerlink" title="生产环境搭建"></a>生产环境搭建</h2><p>服务器2的生产环境搭建。</p><p>生产环境，主要就是LNMP和Java8，LNMP是可选的，看需要部署的程序环境，例如需要部署node.js则只需要node.js环境即可，其他同理，我这边是准备自动部署PHP程序，因此就还是使用LNMP；</p><p>Java8是必须的，Jenkins使用SSH连接到服务器时是需要源服务器有Java环境的</p><h3 id="安装LNMP"><a href="#安装LNMP" class="headerlink" title="安装LNMP"></a>安装LNMP</h3><p>LNMP环境安装教程 : <a href="https://lnmp.org/install.html" target="_blank" rel="noopener">LNMP一键安装包 - 安装教程</a></p><h3 id="安装Java8"><a href="#安装Java8" class="headerlink" title="安装Java8"></a>安装Java8</h3><p>Jenkins连接节点的服务器必须安装！其他服务器无需安装！</p><p>首先更新 yum 源<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure></p><p>安装 jdk1.8<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure></p><p>这里注意，是可以选择Java版本的，我这里使用了8所以按照8的方式安装的</p><p>可以搜索yum选择需要安装的版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search java | grep jdk</span><br></pre></td></tr></table></figure></p><p>一般 使用上面方法安装的Java配置文件都在 /etc/profile</p><p>编辑配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure></p><p>在末尾添加 环境变量，注意修改自己的版本号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/user/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br></pre></td></tr></table></figure></p><p>重置 profile<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>查看Java版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></p><h2 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h2><h3 id="安装必要的插件"><a href="#安装必要的插件" class="headerlink" title="安装必要的插件"></a>安装必要的插件</h3><p>打开Jenkins登录后 打开 系统管理 - 插件管理 - 可选插件</p><p>搜索 安装 以下插件</p><p>汉化语言包(可选)</p><ul><li>Locale plugin      </li><li>Localization: Chinese (Simplified)</li></ul><p>Docker容器(可选)</p><ul><li>Docker Pipeline</li></ul><p>远程连接(必须)</p><ul><li>SSH plugin</li><li>SSH Slaves plugin</li><li>Oracle Java SE Development Kit Installer Plugin</li></ul><p>Git服务(推荐)</p><ul><li>GitHub plugin</li><li>Gogs plugin</li></ul><p>推荐安装(可选)</p><ul><li>bouncycastle API Plugin</li><li>Branch API Plugin</li><li>Command Agent Launcher Plugin</li></ul><p>插件属于按需配置，不适合自己的插件无需安装</p><h3 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h3><p>增加节点必须要先在节点服务器配置Java环境，参照上面的配置Java8环境配置！<br>如果没有配置Java环境则会报错！</p><p>增加节点必须要有SSH插件，因此如果界面与我不一样请检查自己是否安装了上面的插件</p><p>打开Jenkins 系统管理 - 节点管理 - 新建节点<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/11/nRy9qOexkG3fw7N.png" alt="1.png" title>                </div>                <div class="image-caption">1.png</div>            </figure></p><p>新建节点页面如下<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/11/47gwD95NBtXfOQb.png" alt="2.png" title>                </div>                <div class="image-caption">2.png</div>            </figure></p><p>如果没有设置过凭证则选择添加，界面如下<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/11/LdAF3eXkqrQmuDR.png" alt="3.png" title>                </div>                <div class="image-caption">3.png</div>            </figure></p><p>全部设置完点保存，他会自动启动代理节点</p><p>首页左下角会显示状态<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/11/JhEOstraiI5Lqd4.png" alt="4.png" title>                </div>                <div class="image-caption">4.png</div>            </figure></p><p>或者在节点管理里面也可以看到</p><h3 id="配置Gogs-WebHook"><a href="#配置Gogs-WebHook" class="headerlink" title="配置Gogs WebHook"></a>配置Gogs WebHook</h3><p>根据上一节我们配置好的Gogs，新建一个仓库，这里不多说，直接点加号就行，用过Github的都懂</p><p>可以选择公有仓库或者私有仓库，我这里都是私有仓库，也可以使用Gogs的迁移外部仓库功能直接迁移，迁移时可能会出现504错误，这是因为Nginx的反向代理时有超时设置，超过指定时间则直接504，我们在迁移仓库时经常会超时，因此建议修改一下默认超时时间，具体配置可以自行搜索，不多赘述。</p><p>找到需要自动构建的仓库，选择 仓库设置 - 管理 Web 钩子 - 添加Web钩子</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/11/7uaGjQWqImfYXry.png" alt="6.png" title>                </div>                <div class="image-caption">6.png</div>            </figure><p>注意：图中红框处的test需要跟后面配置的Jenkins对应，例如我创建的Jenkins任务名为 test 则此处填写test，修改域名为你的Jenkins域名，其他格式一致</p><p>注意：图中秘钥可随便填写，记录下来，配置Jenkins任务时会用到</p><h3 id="配置Jenkins任务"><a href="#配置Jenkins任务" class="headerlink" title="配置Jenkins任务"></a>配置Jenkins任务</h3><p>打开 Jenkins  新建任务，如果以前没有任务则首页会显示 创建一个新任务<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/11/vloscVY6eJtIK1q.png" alt="5.png" title>                </div>                <div class="image-caption">5.png</div>            </figure></p><p>配置Jenkins任务<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/11/dAXcI6Y3asNbQgv.png" alt="7.png" title>                </div>                <div class="image-caption">7.png</div>            </figure></p><p>描述部分可随便填写，这里主要配置一下 Gogs Webhook</p><p>勾选 Use Gogs secret，Secret填写上面创建Gogs WebHook时的秘钥</p><p>勾选 限制项目的运行节点 ，标签表达式填写你的节点名字，例如我这里的节点名字就是我的服务器ip地址，直接填写ip地址即可</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/11/LX5pBVqgk7du6no.png" alt="8.png" title>                </div>                <div class="image-caption">8.png</div>            </figure><p>源码管理选择Git，Repository URL选择需要自动构建的Git项目地址，http形式的，Credentials处为验证，如果是公共仓库则无需配置，如果是私有库则需要填写登录到 Gogs 的账户和密码，配置与之前的节点配置凭据一样，不多赘述</p><p>指定分支填写需要自动构建的分支，我这里填写的是dev分支，用来做开发版测试使用，根据自己情况来即可</p><h2 id="配置上线"><a href="#配置上线" class="headerlink" title="配置上线"></a>配置上线</h2><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p>由于我创建的节点 目录地址是 /home/wwwroot</p><p>在项目自动构建时，则会自动创建目录 /home/wwwroot/workspace/[JOB NAME]<br>JOB NAME 为 任务名，例如我的 test 则自动创建目录 /home/wwwroot/workspace/test</p><p>Nginx则只需要配置  域名解析即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lnmp vhost add</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/11/QsEMVA.png" alt="9.png" title>                </div>                <div class="image-caption">9.png</div>            </figure><p>按图上配置即可，建议增加SSL证书，增加证书前记得先把域名解析到指定服务器IP上，否则会生成证书失败</p><p>记得给文件夹加上权限，755</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>返回Jenkins，点击立即构建，第一次构建时间可能会长一些，等待即可!</p><p>构建完成后则会在 配置的目录下创建workspace目录，并将代码放入 /home/wwwroot/workspace/test 目录中，根据自己的配置自行修改目录</p><p>由于我的程序涉及到跨目录访问，因此需要更改 fastcgi.conf 文件，与本文无关这里不多说~</p><p>附一张成功截图，由于我这是前后端分离项目，因此没有界面~<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/11/QsV5wj.png" alt="10.png" title>                </div>                <div class="image-caption">10.png</div>            </figure></p><h3 id="自动构建"><a href="#自动构建" class="headerlink" title="自动构建"></a>自动构建</h3><p>上面已经配置好了自动构建，我们每次合并代码或者提交代码变更到dev分支时，Gogs则会以Webhook的形式将内容推送到Jenkins上面去，实现每次更新代码自动构建服务器代码。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目前搭建好的架构，适合还在开发测试程序的开发小组，配合测试人员使用，也能让产品们在汇报工作进度的时候更得心应手，了解开发进度，当然也不是特别准确的开发进度，摸鱼还是要摸的。后面应该会写一下 Portainer + Swarm 管理Docker集群，慢慢写~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置Jenkins实现自动构建&quot;&gt;&lt;a href=&quot;#配置Jenkins实现自动构建&quot; class=&quot;headerlink&quot; title=&quot;配置Jenkins实现自动构建&quot;&gt;&lt;/a&gt;配置Jenkins实现自动构建&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="架构" scheme="https://sbcoder.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="优化" scheme="https://sbcoder.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="架构" scheme="https://sbcoder.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="版本控制" scheme="https://sbcoder.cn/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
</feed>
